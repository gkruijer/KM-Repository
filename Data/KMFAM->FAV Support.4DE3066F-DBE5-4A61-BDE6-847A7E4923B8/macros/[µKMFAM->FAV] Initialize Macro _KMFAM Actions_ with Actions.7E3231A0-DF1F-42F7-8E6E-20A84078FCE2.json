{
	"CreationDate": 659305068.725093,
	"UID": "7E3231A0-DF1F-42F7-8E6E-20A84078FCE2",
	"Name": "[µKMFAM->FAV] Initialize Macro \"KMFAM Actions\" with Actions",
	"Triggers": [
		{
			"ReturnsValue": true,
			"MacroTriggerType": "Subroutine",
			"Parameters": [
				"Local Add Keywords To Notes",
				"Local Collapse Group",
				"Local Group Color",
				"Local Starting Index",
				"Local Ending Index"
			]
		}
	],
	"ModificationDate": 659711334.398324,
	"Actions": [
		{
			"MacroActionType": "Comment",
			"Title": "Initialize Macro \"KMFAM Actions\" with Actions v1.0",
			"StyledText": "\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\tcnRmZAAAAAADAAAAAgAA\n\t\t\t\t\t\t\tAAcAAABUWFQucnRmAQAA\n\t\t\t\t\t\t\tAC5GAwAAKwAAAAEAAAA+\n\t\t\t\t\t\t\tAwAAe1xydGYxXGFuc2lc\n\t\t\t\t\t\t\tYW5zaWNwZzEyNTJcY29j\n\t\t\t\t\t\t\tb2FydGYyNTEzClxjb2Nv\n\t\t\t\t\t\t\tYXRleHRzY2FsaW5nMFxj\n\t\t\t\t\t\t\tb2NvYXBsYXRmb3JtMHtc\n\t\t\t\t\t\t\tZm9udHRibFxmMFxmc3dp\n\t\t\t\t\t\t\tc3NcZmNoYXJzZXQwIEhl\n\t\t\t\t\t\t\tbHZldGljYTtcZjFcZnN3\n\t\t\t\t\t\t\taXNzXGZjaGFyc2V0MCBI\n\t\t\t\t\t\t\tZWx2ZXRpY2EtQm9sZDt9\n\t\t\t\t\t\t\tCntcY29sb3J0Ymw7XHJl\n\t\t\t\t\t\t\tZDI1NVxncmVlbjI1NVxi\n\t\t\t\t\t\t\tbHVlMjU1O1xyZWQwXGdy\n\t\t\t\t\t\t\tZWVuMFxibHVlMDt9Cntc\n\t\t\t\t\t\t\tKlxleHBhbmRlZGNvbG9y\n\t\t\t\t\t\t\tdGJsOztcY3NzcmdiXGMw\n\t\t\t\t\t\t\tXGMwXGMwXGM4NDcwNlxj\n\t\t\t\t\t\t\tbmFtZSBjb250cm9sVGV4\n\t\t\t\t\t\t\tdENvbG9yO30KXHBhcmRc\n\t\t\t\t\t\t\tdHg1NjBcdHgxMTIwXHR4\n\t\t\t\t\t\t\tMTY4MFx0eDIyNDBcdHgy\n\t\t\t\t\t\t\tODAwXHR4MzM2MFx0eDM5\n\t\t\t\t\t\t\tMjBcdHg0NDgwXHR4NTA0\n\t\t\t\t\t\t\tMFx0eDU2MDBcdHg2MTYw\n\t\t\t\t\t\t\tXHR4NjcyMFxwYXJkaXJu\n\t\t\t\t\t\t\tYXR1cmFsXHBhcnRpZ2h0\n\t\t\t\t\t\t\tZW5mYWN0b3IwCgpcZjBc\n\t\t\t\t\t\t\tZnMzMCBcY2YyIE5hbWU6\n\t\t\t\t\t\t\tIEluaXRpYWxpemUgTWFj\n\t\t\t\t\t\t\tcm8gIktNRkFNIEFjdGlv\n\t\t\t\t\t\t\tbnMiIHdpdGggQWN0aW9u\n\t\t\t\t\t\t\tcyAoU3Vicm91dGluZSlc\n\t\t\t\t\t\t\tClZlcnNpb246IDEuMFwK\n\t\t\t\t\t\t\tVXBkYXRlZDogMjAyMS8x\n\t\t\t\t\t\t\tMS8yMyAxMzo1MyBQVFwK\n\t\t\t\t\t\t\tQnk6IERhbiBUaG9tYXNc\n\t\t\t\t\t\t\tClwKXHBhcmRcdHg1NjBc\n\t\t\t\t\t\t\tdHgxMTIwXHR4MTY4MFx0\n\t\t\t\t\t\t\teDIyNDBcdHgyODAwXHR4\n\t\t\t\t\t\t\tMzM2MFx0eDM5MjBcdHg0\n\t\t\t\t\t\t\tNDgwXHR4NTA0MFx0eDU2\n\t\t\t\t\t\t\tMDBcdHg2MTYwXHR4Njcy\n\t\t\t\t\t\t\tMFxwYXJkaXJuYXR1cmFs\n\t\t\t\t\t\t\tXHBhcnRpZ2h0ZW5mYWN0\n\t\t\t\t\t\t\tb3IwCgpcZjFcYiBcY2Yy\n\t\t\t\t\t\t\tIFBVUlBPU0U6ClxmMFxi\n\t\t\t\t\t\t\tMCBcClwKU2VlIHRoZSBt\n\t\t\t\t\t\t\tYWNybyAKXGYxXGIgW0tN\n\t\t\t\t\t\t\tRkFNLT5GQVZdIEtNRkFN\n\t\t\t\t\t\t\tIEFjdGlvbnMKXGYwXGIw\n\t\t\t\t\t\t\tICBmb3IgYW4gZXhwbGFu\n\t\t\t\t\t\t\tYXRpb24uXApcCgpcZjFc\n\t\t\t\t\t\t\tYiBWRVJTSU9OIEhJU1RP\n\t\t\t\t\t\t\tUlk6ClxmMFxiMCBcCjEu\n\t\t\t\t\t\t\tMCAtIEluaXRpYWwgdmVy\n\t\t\t\t\t\t\tc2lvbi5cCn0BAAAAIwAA\n\t\t\t\t\t\t\tAAEAAAAHAAAAVFhULnJ0\n\t\t\t\t\t\t\tZhAAAAAeY51htgEAAAAA\n\t\t\t\t\t\t\tAAAAAAAA\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\t",
			"ActionColor": "Yellow",
			"ActionUID": 101279
		},
		{
			"MacroActionType": "Comment",
			"Title": "License Agreement / Disclaimer",
			"StyledText": "\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\tcnRmZAAAAAADAAAAAgAA\n\t\t\t\t\t\t\tAAcAAABUWFQucnRmAQAA\n\t\t\t\t\t\t\tAC6fAwAAKwAAAAEAAACX\n\t\t\t\t\t\t\tAwAAe1xydGYxXGFuc2lc\n\t\t\t\t\t\t\tYW5zaWNwZzEyNTJcY29j\n\t\t\t\t\t\t\tb2FydGYyNTEzClxjb2Nv\n\t\t\t\t\t\t\tYXRleHRzY2FsaW5nMFxj\n\t\t\t\t\t\t\tb2NvYXBsYXRmb3JtMHtc\n\t\t\t\t\t\t\tZm9udHRibFxmMFxmc3dp\n\t\t\t\t\t\t\tc3NcZmNoYXJzZXQwIEhl\n\t\t\t\t\t\t\tbHZldGljYTt9CntcY29s\n\t\t\t\t\t\t\tb3J0Ymw7XHJlZDI1NVxn\n\t\t\t\t\t\t\tcmVlbjI1NVxibHVlMjU1\n\t\t\t\t\t\t\tO30Ke1wqXGV4cGFuZGVk\n\t\t\t\t\t\t\tY29sb3J0Ymw7O30KXHBh\n\t\t\t\t\t\t\tcmRcdHg1NjBcdHgxMTIw\n\t\t\t\t\t\t\tXHR4MTY4MFx0eDIyNDBc\n\t\t\t\t\t\t\tdHgyODAwXHR4MzM2MFx0\n\t\t\t\t\t\t\teDM5MjBcdHg0NDgwXHR4\n\t\t\t\t\t\t\tNTA0MFx0eDU2MDBcdHg2\n\t\t\t\t\t\t\tMTYwXHR4NjcyMFxwYXJk\n\t\t\t\t\t\t\taXJuYXR1cmFsXHBhcnRp\n\t\t\t\t\t\t\tZ2h0ZW5mYWN0b3IwCgpc\n\t\t\t\t\t\t\tZjBcZnMyNCBcY2YwIFBl\n\t\t\t\t\t\t\tcm1pc3Npb24gdG8gdXNl\n\t\t\t\t\t\t\tLCBjb3B5LCBtb2RpZnks\n\t\t\t\t\t\t\tIGFuZC9vciBkaXN0cmli\n\t\t\t\t\t\t\tdXRlIHRoaXMgc29mdHdh\n\t\t\t\t\t\t\tcmUgZm9yIGFueSBwdXJw\n\t\t\t\t\t\t\tb3NlIHdpdGggb3Igd2l0\n\t\t\t\t\t\t\taG91dCBmZWUgaXMgaGVy\n\t\t\t\t\t\t\tZWJ5IGdyYW50ZWQuXApc\n\t\t\t\t\t\t\tClRIRSBTT0ZUV0FSRSBJ\n\t\t\t\t\t\t\tUyBQUk9WSURFRCAiQVMg\n\t\t\t\t\t\t\tSVMiIEFORCBUSEUgQVVU\n\t\t\t\t\t\t\tSE9SIERJU0NMQUlNUyBB\n\t\t\t\t\t\t\tTEwgV0FSUkFOVElFUyBX\n\t\t\t\t\t\t\tSVRIIFJFR0FSRCBUTyBU\n\t\t\t\t\t\t\tSElTIFNPRlRXQVJFIElO\n\t\t\t\t\t\t\tQ0xVRElORyBBTEwgSU1Q\n\t\t\t\t\t\t\tTElFRCBXQVJSQU5USUVT\n\t\t\t\t\t\t\tIE9GIE1FUkNIQU5UQUJJ\n\t\t\t\t\t\t\tTElUWSBBTkQgRklUTkVT\n\t\t\t\t\t\t\tUy4gSU4gTk8gRVZFTlQg\n\t\t\t\t\t\t\tU0hBTEwgVEhFIEFVVEhP\n\t\t\t\t\t\t\tUiBCRSBMSUFCTEUgRk9S\n\t\t\t\t\t\t\tIEFOWSBTUEVDSUFMLCBE\n\t\t\t\t\t\t\tSVJFQ1QsIElORElSRUNU\n\t\t\t\t\t\t\tLCBPUiBDT05TRVFVRU5U\n\t\t\t\t\t\t\tSUFMIERBTUFHRVMgT1Ig\n\t\t\t\t\t\t\tQU5ZIERBTUFHRVMgV0hB\n\t\t\t\t\t\t\tVFNPRVZFUiBSRVNVTFRJ\n\t\t\t\t\t\t\tTkcgRlJPTSBMT1NTIE9G\n\t\t\t\t\t\t\tIFVTRSwgREFUQSBPUiBQ\n\t\t\t\t\t\t\tUk9GSVRTLCBXSEVUSEVS\n\t\t\t\t\t\t\tIElOIEFOIEFDVElPTiBP\n\t\t\t\t\t\t\tRiBDT05UUkFDVCwgTkVH\n\t\t\t\t\t\t\tTElHRU5DRSBPUiBPVEhF\n\t\t\t\t\t\t\tUiBUT1JUSU9VUyBBQ1RJ\n\t\t\t\t\t\t\tT04sIEFSSVNJTkcgT1VU\n\t\t\t\t\t\t\tIE9GIE9SIElOIENPTk5F\n\t\t\t\t\t\t\tQ1RJT04gV0lUSCBUSEUg\n\t\t\t\t\t\t\tVVNFIE9SIFBFUkZPUk1B\n\t\t\t\t\t\t\tTkNFIE9GIFRISVMgU09G\n\t\t\t\t\t\t\tVFdBUkUufQEAAAAjAAAA\n\t\t\t\t\t\t\tAQAAAAcAAABUWFQucnRm\n\t\t\t\t\t\t\tEAAAAGJHnWG2AQAAAAAA\n\t\t\t\t\t\t\tAAAAAAA=\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\t",
			"ActionColor": "Yellow",
			"ActionUID": 101280
		},
		{
			"MacroActionType": "SearchReplace",
			"ActionName": "Filter Palette Seq Number from “%ExecutingMacro%” into Local_ExecutingMacro",
			"Source": "Text",
			"DestinationVariable": "Local_ExecutingMacro",
			"Action": "IgnoreCaseRegEx",
			"Replace": "",
			"ActionUID": 126588,
			"Search": "^\\d\\d\\)",
			"IsDisclosed": false,
			"Destination": "Variable",
			"Text": "%ExecutingMacro%",
			"Which": "All"
		},
		{
			"MacroActionType": "ExecuteMacro",
			"MacroUID": "C9E7EDDB-F0D2-4F45-8DCC-A403B74EF347",
			"ActionUID": 89137,
			"IsDisclosed": false,
			"TimeOutAbortsMacro": true,
			"ActionColor": "Magenta",
			"UseParameter": true,
			"Asynchronously": false
		},
		{
			"MacroActionType": "ExecuteSubroutine",
			"ActionName": "Edit Macro \"[KMFAM->FAV] KMFAM Actions\"",
			"MacroUID": "33F20945-1A40-4216-B7B3-FF3DF73A4A0D",
			"IsDisclosed": false,
			"ActionColor": "Magenta",
			"ActionUID": 89146,
			"ResultVariable": "Local_Result",
			"TimeOutAbortsMacro": true,
			"Parameters": [
				"D1FDF90D-9F98-4151-9C72-358ECFEC0AEC"
			]
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "If actions already exist, prompt the user",
			"ActionUID": 96054,
			"IsDisclosed": false,
			"ActionColor": "Yellow",
			"ElseActions": [],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Calculation",
						"Text": "JSONVALUE(Local_Result.actionCount) > 0"
					}
				]
			},
			"ElseActionListDisclosed": false,
			"ThenActions": [
				{
					"MacroActionType": "ExecuteSubroutine",
					"ActionName": "Enable palette items becuse there are actions in the macro already",
					"MacroUID": "B00F37AA-F512-4F60-8A3C-15A22E22BEEB",
					"IsDisclosed": false,
					"ActionColor": "Magenta",
					"ActionUID": 109070,
					"ResultVariable": "VarName",
					"TimeOutAbortsMacro": true,
					"Parameters": [
						"true"
					]
				},
				{
					"MacroActionType": "PromptForUserInput",
					"Title": "%Variable%Local_ExecutingMacro%",
					"Prompt": "There are existing actions. You should delete them first, but it's up to you.",
					"ActionUID": 96055,
					"TimeOutAbortsMacro": true,
					"Buttons": [
						{
							"Button": "Continue Anyway (not recommended)",
							"Cancel": false
						},
						{
							"Button": "Cancel/",
							"Cancel": true
						}
					],
					"Variables": []
				}
			]
		},
		{
			"MacroActionType": "ExecuteJavaScriptForAutomation",
			"ActionName": "Put all favorite actions on the clipboard",
			"TrimResults": true,
			"StopOnFailure": false,
			"Variable": "Local_Result",
			"IncludeStdErr": false,
			"ActionUID": 89142,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "(function(inDesignMode, designModeParams) {\n\t'use strict';\n\tObjC.import('AppKit');\n\n\t// #region ======== Global Variables =============================\n\tconst _editorAppName = \"Code\";\n    const _kme = Application(\"Keyboard Maestro Engine\");\n    const _currentApp = Application.currentApplication();\n    _currentApp.includeStandardAdditions = true;\n\t// #endregion\n\n\tvar FileUtils = (function() {\n\t\tfunction _getErrorMessage(nsError, defaultErrorMessage) {\n\t\t\ttry {\n\t\t\t\treturn $(nsError.localizedDescription).js;\n\t\t\t} catch (e) {\n\t\t\t\treturn defaultErrorMessage || \"Unknown Error\";\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tfileExists: function(path) {\n\t\t\t\tvar result = this.getFileOrFolderExists(path);\n\t\t\t\treturn result.exists && result.isFile;\n\t\t\t},\n\n\t\t\tgetFileOrFolderExists: function(path) {\n\t\t\t\tvar isDirectory = Ref();\n\t\t\t\tvar exists = $.NSFileManager.defaultManager\n\t\t\t\t\t.fileExistsAtPathIsDirectory(path, isDirectory);\n\t\t\t\treturn {\n\t\t\t\t\texists: exists,\n\t\t\t\t\tisFile: isDirectory[0] !== 1\n\t\t\t\t};\n\t\t\t},\n\n\t\t\treadTextFile: function(path, throwIfNotFound) {\n\t\t\t\tif (!this.fileExists(path)) {\n\t\t\t\t\tif (throwIfNotFound)\n\t\t\t\t\t\tthrow Error(\"File not found: '\" + path + \"'\");\n\t\t\t\t\treturn \"\";\n\t\t\t\t}\n\t\t\t\tvar nsError = Ref();\n\t\t\t\tvar result = ObjC.unwrap(\n\t\t\t\t\t$.NSString.stringWithContentsOfFileEncodingError(\n\t\t\t\t\t\t$(path).stringByStandardizingPath,\n\t\t\t\t\t\t$.NSUTF8StringEncoding,\n\t\t\t\t\t\tnsError)\n\t\t\t\t\t);\n\t\t\t\tif (!result)\n\t\t\t\t\tthrow Error(_getErrorMessage(nsError, \"File not found: '\" + path + \"'\"));\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t})();\n\n\tvar ClipboardUtils = (function() {\n\t\treturn {\n\t\t\tclearContents: function() {\n\t\t\t\t/*jshint -W030 */\n\t\t\t\t$.NSPasteboard.generalPasteboard.clearContents;\n\t\t\t\t/*jshint +W030 */\n\t\t\t},\n\n\t\t\tclipboardContainsType: function(type) {\n\t\t\t\treturn this.getClipboardTypes().indexOf(type) >= 0;\n\t\t\t},\n\n\t\t\tgetClipboardString: function(throwIfNotFound) {\n\t\t\t\treturn this.getClipboardStringForType(\n\t\t\t\t\tthis.getPlainTextClipboardType(), throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetClipboardStringForType: function(type, throwIfNotFound) {\n\t\t\t\tif (this.clipboardContainsType(type))\n\t\t\t\t\treturn ObjC.unwrap(\n\t\t\t\t\t\t$.NSPasteboard.generalPasteboard\n\t\t\t\t\t\t.stringForType(type));\n\t\t\t\tif (throwIfNotFound)\n\t\t\t\t\tthrow Error(\"No clipboard data for specified type\");\n\t\t\t\treturn \"\";\n\t\t\t},\n\n\t\t\tgetClipboardTypes: function() {\n\t\t\t\tvar items = $.NSPasteboard.generalPasteboard.pasteboardItems;\n\t\t\t\tif (items.count === 0)\n\t\t\t\t\treturn [];\n\n\t\t\t\treturn ObjC.deepUnwrap(items.js[0].types);\n\t\t\t},\n\n\t\t\tgetPlainTextClipboardType: function() {\n\t\t\t\treturn $.NSPasteboardTypeString.js;\n\t\t\t},\n\n\t\t\tsetClipboardString: function(str) {\n\t\t\t\tthis.setClipboardStringForType(str, this.getPlainTextClipboardType());\n\t\t\t},\n\n\t\t\tsetClipboardStringForType: function(str, type) {\n\t\t\t\tvar clipboard = $.NSPasteboard.generalPasteboard;\n\t\t\t\t/*jshint -W030 */\n\t\t\t\tclipboard.clearContents;\n\t\t\t\t/*jshint +W030 */\n\t\t\t\tclipboard.setStringForType($(str), $(type));\n\t\t\t}\n\t\t};\n\t})();\n\n\tvar PlistUtils = (function() {\n\t\tvar _currentApp;\n\t\tvar _dataNodeToken = \"41E4D515-C065-4C24-9859-EA2479C52CC9\";\n\n\t\tvar _kmObjectType_action = \"action\";\n\t\tvar _kmObjectType_group = \"group\";\n\t\tvar _kmObjectType_macro = \"macro\";\n\n\t\tvar _kmActionsXmlClipboardStringType = \"com.stairways.keyboardmaestro.actionarray\";\n\t\tvar _kmGroupsXmlClipboardStringType = \"com.stairways.keyboardmaestro.macrogroupsarray\";\n\t\tvar _kmMacrosXmlClipboardStringType = \"com.stairways.keyboardmaestro.macrosarray\";\n\n\t\tvar _kmClipboardStringTypes = {}\n\t\t_kmClipboardStringTypes[_kmObjectType_action] = _kmActionsXmlClipboardStringType;\n\t\t_kmClipboardStringTypes[_kmObjectType_group] = _kmGroupsXmlClipboardStringType;\n\t\t_kmClipboardStringTypes[_kmObjectType_macro] = _kmMacrosXmlClipboardStringType;\n\n\t\tfunction _cleanupXmlAfterDeserialization(xml) {\n\t\t\tvar result = xml.replace(/<real>(-?\\d+)(\\.0)?<\\/real>/g, \"<integer>$1</integer>\");\n\t\t\tvar result = result.replace(/(<key>CreationDate<\\/key>[\\W]*<)(integer>)(\\d+)(<\\/integer>)/g, \"$1real>$3.0</real>\");\n\t\t\tvar result = result.replace(/(<key>TimeOutPeriod<\\/key>[\\W]*<)(integer)(>\\d+<\\/)(integer)(>)/g, \"$1real$3real$5\");\n\t\t\tvar result = result.replace(/(<key>NSSuperScript<\\/key>[\\W]*<)(real)(>-?\\d+<\\/)(real)(>)/g, \"$1integer$3integer$5\");\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _deserializeFromXmlString(xml) {\n\t\t\tvar nsError = $();\n\t\t\tvar result = ObjC.deepUnwrap(\n\t\t\t\t$.NSPropertyListSerialization.propertyListWithDataOptionsFormatError(\n\t\t\t\t\t$(xml).dataUsingEncoding($.NSUTF8StringEncoding), 0, 0, nsError));\n\t\t\tif (!result)\n\t\t\t\tthrow Error(_getErrorMessage(nsError, \"Could not convert string to plist\"));\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _deTokenizeXmlDataNodes(xml) {\n\t\t\tvar regex = new RegExp(\"(<string>[\\\\W]*\" + _dataNodeToken + \")\", \"g\");\n\t\t\tvar result = xml.replace(regex, \"<data>\");\n\n\t\t\tregex = new RegExp(_dataNodeToken + \"[\\\\W]*<\\\\/string>\", \"g\");\n\t\t\treturn result.replace(regex, \"</data>\");\n\t\t}\n\n\t\tfunction _escapeXml(str) {\n\t\t\treturn str.replace(/[<>&'\"]/g, function (c) {\n\t\t\t\tswitch (c) {\n\t\t\t\t\tcase '<': return '&lt;';\n\t\t\t\t\tcase '>': return '&gt;';\n\t\t\t\t\tcase '&': return '&amp;';\n\t\t\t\t\tcase '\\'': return '&apos;';\n\t\t\t\t\tcase '\"': return '&quot;';\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction _getAppSupportFolderName() {\n\t\t\tif (!_currentApp) {\n\t\t\t\t_currentApp = Application.currentApplication();\n\t\t\t\t_currentApp.includeStandardAdditions = true;\n\t\t\t}\n\t\t\treturn _currentApp.pathTo('application support', { from: 'user domain' });\n\t\t}\n\n\t\tfunction _clipboardContainsType(type) {\n\t\t\treturn _getClipboardTypes().indexOf(type) >= 0;\n\t\t}\n\n\t\tfunction _getClipboardStringForType(type, throwIfNotFound) {\n\t\t\tif (_clipboardContainsType(type))\n\t\t\t\treturn ObjC.unwrap(\n\t\t\t\t\t$.NSPasteboard.generalPasteboard\n\t\t\t\t\t.stringForType(type));\n\t\t\tif (throwIfNotFound)\n\t\t\t\tthrow Error(\"No clipboard data for specified type\");\n\t\t\treturn \"\";\n\t\t}\n\n\t\tfunction _getClipboardTypes() {\n\t\t\tvar items = $.NSPasteboard.generalPasteboard.pasteboardItems;\n\t\t\tif (items.count === 0)\n\t\t\t\treturn [];\n\t\t\treturn ObjC.deepUnwrap(items.js[0].types);\n\t\t}\n\n\t\tfunction _getErrorMessage(nsError, message) {\n\t\t\ttry {\n\t\t\t\treturn message + \". Error: \" + ObjC.unwrap(nsError.localizedDescription);\n\t\t\t} catch (e) {\n\t\t\t\treturn message;\n\t\t\t}\n\t\t}\n\n\t\tfunction _getKMClipboardStringTypeForObjectType(objectType) {\n\t\t\tvar result = _kmClipboardStringTypes[objectType];\n\t\t\tif (!result)\n\t\t\t\tthrow Error(\"'\" + objectType + \"' is not a valid KM Object Type\");\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _getKMPlistXmlObjectType(xml) {\n\t\t\tif (xml.indexOf(\"<key>AddToMacroPalette</key>\") > 0)\n\t\t\t\treturn _kmObjectType_group;\n\t\t\tif (xml.indexOf(\"<key>Triggers</key>\") > 0)\n\t\t\t\treturn _kmObjectType_macro;\n\t\t\treturn _kmObjectType_action;\n\t\t}\n\n\t\tfunction _reOrderJsonProperties(json) {\n\n\t\t\tfunction moveActionPropertyToTop(jsonArray, propertyName) {\n\n\t\t\t\tfunction findProperty(startingIndex) {\n\t\t\t\t\tfor (var i = startingIndex; i < jsonArray.length; i++) {\n\t\t\t\t\t\tvar line = jsonArray[i];\n\t\t\t\t\t\tvar regex = new RegExp('^([\\\\t]+)\"' + propertyName + '\":');\n\t\t\t\t\t\tvar match = line.match(regex);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tleadingTabs: match[1]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tfunction findActionStartIndex(startingIndex, leadingTabs) {\n\t\t\t\t\tvar startingLineRegex = new RegExp(\"^(\" + leadingTabs.substring(0, leadingTabs.length - 1) + \"[^\\\\t])\");\n\t\t\t\t\tfor (var i = startingIndex - 1; i >= 0; i--) {\n\t\t\t\t\t\tvar line = jsonArray[i];\n\t\t\t\t\t\tvar match = line.match(startingLineRegex);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tif (!match[1].endsWith(\"{\"))\n\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\treturn i + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tfunction moveProperty(fromIndex, toIndex) {\n\t\t\t\t\tvar endsWithComma = jsonArray[fromIndex].endsWith(\",\");\n\t\t\t\t\tif (!endsWithComma)\n\t\t\t\t\t\tjsonArray[fromIndex] = jsonArray[fromIndex] + \",\";\n\t\t\t\t\tjsonArray.splice(toIndex, 0, jsonArray.splice(fromIndex, 1)[0]);\n\n\t\t\t\t\t// If we moved the last property of the action, then the new last\n\t\t\t\t\t// property line probably needs to have its trailing comma removed.\n\t\t\t\t\tif (!endsWithComma) {\n\t\t\t\t\t\tvar line = jsonArray[fromIndex];\n\t\t\t\t\t\tif (line.endsWith(\",\"))\n\t\t\t\t\t\t\tjsonArray[fromIndex] = line.substring(0, line.length - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// moveActionPropertyToTop()\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (i < jsonArray.length) {\n\t\t\t\t\tvar propertyLineInfo = findProperty(i);\n\t\t\t\t\tif (!propertyLineInfo)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tvar actionStartIndex = findActionStartIndex(propertyLineInfo.index, propertyLineInfo.leadingTabs);\n\t\t\t\t\tif (actionStartIndex >= 0 && actionStartIndex < propertyLineInfo.index)\n\t\t\t\t\t\tmoveProperty(propertyLineInfo.index, actionStartIndex);\n\n\t\t\t\t\ti = propertyLineInfo.index + 1;\n\t\t\t\t}\n\t\t\t} // moveActionPropertyToTop()\n\n\t\t\t// _reOrderJsonProperties()\n\t\t\tif (json.indexOf(\"\\t\") < 0)\n\t\t\t\tthrow Error(\"ReOrderJsonProperties expects the JSON parameter to be stringified with tabs\");\n\t\t\tvar jsonArray = json.split(\"\\n\");\n\n\t\t\t// NOTE: These are backwards - the one we want top-most is last in the array.\n\t\t\t[\"ActionName\", \"Title\", \"MacroActionType\"].forEach(function(propertyName) {\n\t\t\t\tmoveActionPropertyToTop(jsonArray, propertyName);\n\t\t\t});\n\t\t\treturn jsonArray.join(\"\\n\");\n\t\t} // _reOrderJsonProperties()\n\n\t\tfunction _serializeToXmlString(plist) {\n\t\t\tvar data = $.NSPropertyListSerialization.dataWithPropertyListFormatOptionsError(\n\t\t\t\t$(plist), $.NSPropertyListXMLFormat_v1_0, 0, null);\n\t\t\tvar nsstring = $.NSString.alloc.initWithDataEncoding(data, $.NSUTF8StringEncoding);\n\t\t\tvar result = $(nsstring).js;\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _setClipboardStringForType(str, type) {\n\t\t\tvar clipboard = $.NSPasteboard.generalPasteboard;\n\t\t\tclipboard.clearContents;\n\t\t\tclipboard.setStringForType($(str), $(type));\n\t\t}\n\n\t\tfunction _tokenizeXmlDataNodes(xml) {\n\t\t\treturn xml.replace(/(<data>)([\\W]*)([^<]*)(<\\/data>)/g, \n\t\t\t\t\"<string>$2\" + _dataNodeToken + \"$2$3\" + _dataNodeToken + \"$2</string>\");\n\t\t}\n\n\t\treturn {\n\t\t\tKMObjectType_action: _kmObjectType_action,\n\t\t\tKMObjectType_group: _kmObjectType_group,\n\t\t\tKMObjectType_macro: _kmObjectType_macro,\n\n\t\t\tcomparePlistToXmlString: function(plist, origXml, failOptions) {\n\t\t\t\tvar testXml = this.serializeToXmlString(plist);\n\t\t\t\tif (testXml === origXml)\n\t\t\t\t\treturn;\n\n\t\t\t\tvar savedToFile = false;\n\t\t\t\tvar savedOrigFilePath = null;\n\t\t\t\tvar savedTestFilePath = null;\n\t\t\t\tvar defaultFailOptions = this.getComparePlistFailDefaultOptions();\n\t\t\t\tif (!failOptions)\n\t\t\t\t\tfailOptions = defaultFailOptions;\n\n\t\t\t\tif (failOptions && failOptions.saveFiles) {\n\n\t\t\t\t\tvar saveFolderPath = failOptions.saveFolderPath || defaultFailOptions.saveFolderPath;\n\t\t\t\t\tif (saveFolderPath.substring(saveFolderPath.length-1) !== \"/\")\n\t\t\t\t\t\tsaveFolderPath += \"/\";\n\n\t\t\t\t\tsavedOrigFilePath = saveFolderPath + (failOptions.saveOrigFileName || defaultFailOptions.saveOrigFileName);\n\t\t\t\t\tsavedTestFilePath = saveFolderPath + (failOptions.saveTestFileName || defaultFailOptions.saveTestFileName);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.writeTextFile(origXml, savedOrigFilePath);\n\t\t\t\t\t\tthis.writeTextFile(testXml, savedTestFilePath);\n\t\t\t\t\t\tsavedToFile = true;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar errorMessage = failOptions && failOptions.errorMessage ? failOptions.errorMessage : defaultFailOptions.errorMessage;\n\t\t\t\tif (savedToFile)\n\t\t\t\t\terrorMessage = errorMessage +\n\t\t\t\t\t\t\"\\nSaved original XML to: '\" + savedOrigFilePath + \"'\" +\n\t\t\t\t\t\t\"\\nSaved test XML to: '\" + savedTestFilePath + \"'\";\n\t\t\t\tthrow Error(errorMessage);\n\t\t\t},\n\n\t\t\tconvertJsonStringToXmlString: function(json) {\n\t\t\t\tvar plist = JSON.parse(json);\n\t\t\t\treturn this.serializeToXmlString(plist);\n\t\t\t},\n\n\t\t\tconvertXmlStringToJsonString: function(xml) {\n\t\t\t\tvar plist = this.deserializeFromXmlString(xml);\n\t\t\t\treturn JSON.stringify(plist, null, \"\\t\");\n\t\t\t},\n\n\t\t\tconvertXmlStringToJsonStringAndValidate: function(xml, failOptions) {\n\t\t\t\tvar json = this.convertXmlStringToJsonString(xml);\n\t\t\t\tvar plist = JSON.parse(json);\n\t\t\t\tthis.comparePlistToXmlString(plist, xml, failOptions || this.getCompareJsonFailDefaultOptions());\n\t\t\t\treturn json;\n\t\t\t},\n\n\t\t\tcreateCancelThisMacroAction: function() {\n\t\t\t\treturn _deserializeFromXmlString(\n\t\t\t\t\t`<plist version=\"1.0\">` + \n\t\t\t\t\t`<dict>` + \n\t\t\t\t\t`\t<key>Action</key>` + \n\t\t\t\t\t`\t<string>CancelThisMacro</string>` + \n\t\t\t\t\t`\t<key>ActionColor</key>` + \n\t\t\t\t\t`\t<string>Red</string>` + \n\t\t\t\t\t`\t<key>IsDisclosed</key>` + \n\t\t\t\t\t`\t<false/>` + \n\t\t\t\t\t`\t<key>MacroActionType</key>` + \n\t\t\t\t\t`\t<string>Cancel</string>` + \n\t\t\t\t\t`</dict>` + \n\t\t\t\t\t`</plist>`);\n\t\t\t},\n\n\t\t\tcreateEmptyGroupAction: function(actionName) {\n\t\t\t\tvar result = _deserializeFromXmlString(\n\t\t\t\t\t\"<plist version='1.0'> \\n\" +\n\t\t\t\t\t\"<dict> \\n\" +\n\t\t\t\t\t\"\t<key>ActionName</key> \\n\" +\n\t\t\t\t\t\"\t<string></string> \\n\" +\n\t\t\t\t\t\"\t<key>Actions</key> \\n\" +\n\t\t\t\t\t\"\t<array/> \\n\" +\n\t\t\t\t\t\"\t<key>MacroActionType</key> \\n\" +\n\t\t\t\t\t\"\t<string>Group</string> \\n\" +\n\t\t\t\t\t\"\t<key>TimeOutAbortsMacro</key> \\n\" +\n\t\t\t\t\t\"\t<true/> \\n\" +\n\t\t\t\t\t\"</dict> \\n\" +\n\t\t\t\t\t\"</plist>\");\n\t\t\t\tresult.ActionName = actionName;\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tcreateExecuteMacroAction: function(actionName, macroUID) {\n\t\t\t\tvar result = _deserializeFromXmlString(\n\t\t\t\t\t'<plist version=\"1.0\"> \\n' +\n\t\t\t\t\t'<dict> \\n' +\n\t\t\t\t\t'\t<key>ActionColor</key> \\n' +\n\t\t\t\t\t'\t<string>Red</string> \\n' +\n\t\t\t\t\t'\t<key>ActionName</key> \\n' +\n\t\t\t\t\t'\t<string></string> \\n' +\n\t\t\t\t\t'\t<key>Asynchronously</key> \\n' +\n\t\t\t\t\t'\t<false/> \\n' +\n\t\t\t\t\t'\t<key>MacroActionType</key> \\n' +\n\t\t\t\t\t'\t<string>ExecuteMacro</string> \\n' +\n\t\t\t\t\t'\t<key>MacroUID</key> \\n' +\n\t\t\t\t\t'\t<string></string> \\n' +\n\t\t\t\t\t'\t<key>TimeOutAbortsMacro</key> \\n' +\n\t\t\t\t\t'\t<true/> \\n' +\n\t\t\t\t\t'\t<key>UseParameter</key> \\n' +\n\t\t\t\t\t'\t<false/> \\n' +\n\t\t\t\t\t'</dict> \\n' +\n\t\t\t\t\t'</plist>`');\n\t\t\t\tresult.ActionName = actionName;\n\t\t\t\tresult.MacroUID = macroUID;\n\t\t\t\treturn result;\n\t\t\t},\n\n            createEmptyPlist: function() {\n\t\t\t\treturn _deserializeFromXmlString(\n\t\t\t\t\t\"<plist version='1.0'> \\n\" +\n\t\t\t\t\t\"<array> \\n\" +\n\t\t\t\t\t\"</array> \\n\" +\n\t\t\t\t\t\"</plist>\");\n            },\n\n\t\t\tdeserializeFromJsonString: function(json) {\n\t\t\t\treturn JSON.parse(json);\n\t\t\t},\n\n\t\t\tdeserializeFromJsonFile: function(path) {\n\t\t\t\treturn this.deserializeFromJsonString(this.readTextFile(path));\n\t\t\t},\n\n\t\t\tdeserializeFromXmlFile: function(path) {\n\t\t\t\treturn this.deserializeFromXmlString(this.readTextFile(path));\n\t\t\t},\n\n\t\t\tdeserializeFromXmlFileAndValidate: function(path, failOptions) {\n\t\t\t\treturn this.deserializeFromXmlStringAndValidate(this.readTextFile(path), failOptions);\n\t\t\t},\n\n\t\t\tdeserializeFromXmlString: function(xml) {\n\t\t\t\tvar result = _tokenizeXmlDataNodes(xml);\n\t\t\t\treturn _deserializeFromXmlString(result);\n\t\t\t},\n\n\t\t\tdeserializeFromXmlStringAndValidate: function(xml, failOptions) {\n\t\t\t\tvar result = this.deserializeFromXmlString(xml);\n\t\t\t\tthis.comparePlistToXmlString(result, xml, failOptions);\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tdeserializeKMAllMacrosSourceFile: function() {\n\t\t\t\tvar xml = this.readKMAllMacrosSourceFileAsXml();\n\t\t\t\treturn this.deserializeFromXmlString(xml);\n\t\t\t},\n\n\t\t\tdeserializeKMAllMacrosSourceFileAndValidate: function(failOptions) {\n\t\t\t\tvar xml = this.readKMAllMacrosSourceFileAsXml();\n\t\t\t\treturn this.deserializeFromXmlStringAndValidate(xml, failOptions);\n\t\t\t},\n\n\t\t\tgetCompareJsonFailDefaultOptions: function() {\n\t\t\t\treturn {\n\t\t\t\t\terrorMessage: \"Plist-to-JSON Conversion Error: Converted JSON back to XML, does not match Original XML.\",\n\t\t\t\t\tsaveFiles: true,\n\t\t\t\t\tsaveFolderPath: \"/tmp/\",\n\t\t\t\t\tsaveOrigFileName: \"PlistUtils_CompareFailure_Original.plist\",\n\t\t\t\t\tsaveTestFileName: \"PlistUtils_CompareFailure_Test.plist\"\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tgetComparePlistFailDefaultOptions: function() {\n\t\t\t\treturn {\n\t\t\t\t\terrorMessage: \"Plist Conversion Error: Converted Plist does not match Original XML.\",\n\t\t\t\t\tsaveFiles: true,\n\t\t\t\t\tsaveFolderPath: \"/tmp/\",\n\t\t\t\t\tsaveOrigFileName: \"PlistUtils_CompareFailure_Original.plist\",\n\t\t\t\t\tsaveTestFileName: \"PlistUtils_CompareFailure_Test.plist\"\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tgetInitialCommentFromMacro: function(macro) {\n\t\t\t\tvar results = [];\n\t\t\t\tif (!macro.Actions || macro.Actions.length === 0)\n\t\t\t\t\treturn null;\n\n\t\t\t\tvar action = macro.Actions[0];\n\t\t\t\tif (action.MacroActionType !== \"Comment\")\n\t\t\t\t\treturn null;\n\n\t\t\t\treturn {\n\t\t\t\t\tname: action.ActionName || action.Title || \"\",\n\t\t\t\t\ttitle: action.Title || \"\",\n\t\t\t\t\ttext: action.Text || \"\"\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tgetClipboardString: function(throwIfNotFound) {\n\t\t\t\treturn _getClipboardStringForType($.NSPasteboardTypeString.js, throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetKMActionsXmlFromClipboard: function(throwIfNotFound) {\n\t\t\t\treturn _getClipboardStringForType(_kmActionsXmlClipboardStringType, throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetKMClipboardStringTypeForObjectType: function(objectType) {\n\t\t\t\tvar result = _kmClipboardStringTypes[objectType];\n\t\t\t\tif (!result)\n\t\t\t\t\tthrow Error(\"'\" + objectType + \"' is not a valid KM Object Type\");\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tgetKMGroupsXmlFromClipboard: function(throwIfNotFound) {\n\t\t\t\treturn _getClipboardStringForType(_kmGroupsXmlClipboardStringType, throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetKMMacrosXmlFromClipboard: function(throwIfNotFound) {\n\t\t\t\treturn _getClipboardStringForType(_kmMacrosXmlClipboardStringType, throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetKMPlistXmlObjectType: function(xml) {\n\t\t\t\treturn _getKMPlistXmlObjectType(xml);\n\t\t\t},\n\n\t\t\t// File must contain one macro only, or exception is thrown.\n\t\t\tgetMacroFromKMMacrosFile: function(path) {\n\t\t\t\tvar plist = this.deserializeFromXmlFile(path);\n\t\t\t\tif (!plist)\n\t\t\t\t\tthrow Error(\"Could not read file '\" + path + \"'\");\n\t\t\t\tif (plist.length === 0)\n\t\t\t\t\tthrow Error(\"No macros were found in '\" + path + \"'\");\n\t\t\t\tif (plist.length > 1)\n\t\t\t\t\tthrow Error(\"Multiple macros were found in '\" + path + \"'\");\n\t\t\t\tvar group = plist[0];\n\n\t\t\t\tif (!group.Macros || group.Macros.count === 0)\n\t\t\t\t\tthrow Error(\"No macros were found in '\" + path + \"'\");\n\t\t\t\tif (group.Macros.length > 1)\n\t\t\t\t\tthrow Error(\"Multiple macros were found in '\" + path + \"'\");\n\t\t\t\treturn group.Macros[0];\n\t\t\t},\n\n\t\t\treadKMAllMacrosSourceFileAsXml: function() {\n\t\t\t\tvar path = _getAppSupportFolderName() + \"/Keyboard Maestro/Keyboard Maestro Macros.plist\";\n\n\t\t\t\tvar nsError = $();\n\t\t\t\tvar fileData = $.NSData.dataWithContentsOfFileOptionsError(\n\t\t\t\t\t$(path).stringByStandardizingPath, 0, nsError);\n\t\t\t\tif (!fileData)\n\t\t\t\t\tthrow Error(_getErrorMessage(nsError, \"Could not read file '\" + path + \"'\"));\n\n\t\t\t\tnsError = $();\n\t\t\t\tvar plistData = $.NSPropertyListSerialization.propertyListWithDataOptionsFormatError(\n\t\t\t\t\tfileData, $.NSPropertyListImmutable, 0, nsError);\n\t\t\t\tif (!plistData)\n\t\t\t\t\tthrow Error(_getErrorMessage(nsError, \"Could not deserialize file '\" + path + \"'\"));\n\n\t\t\t\tnsError = $();\n\t\t\t\tvar xmlData = $.NSPropertyListSerialization.dataWithPropertyListFormatOptionsError(\n\t\t\t\t\tplistData, $.NSPropertyListXMLFormat_v1_0, 0, nsError);\n\t\t\t\tif (!xmlData)\n\t\t\t\t\tthrow Error(_getErrorMessage(nsError, \"Could not serialize file '\" + path + \"' to XML\"));\n\n\t\t\t\treturn $($.NSString.alloc.initWithDataEncoding(xmlData, $.NSUTF8StringEncoding)).js;\n\t\t\t},\n\n\t\t\treadTextFile: function(path) {\n\t\t\t\tvar error = $();\n\t\t\t\tvar str = ObjC.unwrap(\n\t\t\t\t\t$.NSString.stringWithContentsOfFileEncodingError(\n\t\t\t\t\t\t$(path).stringByStandardizingPath,\n\t\t\t\t\t\t$.NSUTF8StringEncoding,\n\t\t\t\t\t\terror\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tif (!str)\n\t\t\t\t\tthrow Error(_getErrorMessage(error, \"Could not read file '\" + path + \"', or file is empty\"));\n\t\t\t\treturn str;\n\t\t\t},\n\n\t\t\treOrderJsonProperties: function(json) {\n\t\t\t\treturn _reOrderJsonProperties(json);\n\t\t\t},\n\n\t\t\tserializeToXmlFile: function(obj, path) {\n\t\t\t\tvar str = serializeToXmlString(obj);\n\t\t\t\twriteTextFile(str, path);\n\t\t\t},\n\n\t\t\tserializeToXmlString: function(obj) {\n\t\t\t\tvar str = _serializeToXmlString(obj);\n\t\t\t\tstr = _cleanupXmlAfterDeserialization(str);\n\t\t\t\treturn _deTokenizeXmlDataNodes(str);\n\t\t\t},\n\n\t\t\tsetClipboardToKMPlistXml: function(xml) {\n\t\t\t\tvar objectType = _getKMPlistXmlObjectType(xml);\n\t\t\t\tvar clipboardStringType = _getKMClipboardStringTypeForObjectType(objectType);\n\t\t\t\t_setClipboardStringForType(xml, clipboardStringType);\n\t\t\t\treturn objectType;\n\t\t\t},\n\n\t\t\twriteTextFile: function(text, path) {\n\t\t\t\tvar error = $();\n\t\t\t\tvar str = $.NSString.alloc.initWithUTF8String(text);\n\t\t\t\tvar result = str.writeToFileAtomicallyEncodingError(\n\t\t\t\t\t$(path).stringByStandardizingPath,\n\t\t\t\t\ttrue,\n\t\t\t\t\t$.NSUTF8StringEncoding,\n\t\t\t\t\tnull);\n\t\t\t\tif (!result)\n\t\t\t\t\tthrow Error(_getErrorMessage(error, \"Could not write file '\" + path + \"'\"));\n\t\t\t}\n\t\t};\n\t})();\n    \n\t// #region ======== Helper Functions =============================\n\tfunction getKMVariable(name, required) {\n\t\tvar result = undefined;\n\t\tif (inDesignMode && designModeParams)\n\t\t\tresult = designModeParams[name];\n\t\tif (result === undefined) {\n            if (name.match(/^Instance|^Local/)) {\n                var inst = _currentApp.systemAttribute(\"KMINSTANCE\");\n                result = _kme.getvariable(name, {instance: inst});\n            } else {\n                result = _kme.getvariable(name);\n            }\n        }\n        if (required && !result)\n\t\t\tthrow new Error(\"Variable '\" + name + \"' is empty\");\n\t\treturn result;\n\t}\n\n\tfunction getBoolKMVariable(name) {\n\t\treturn getKMVariable(name).search(/^(1|true)$/i) === 0;\n\t}\n\n\tfunction getKMIntVariable(name, defaultValue) {\n\t\tvar s = getKMVariable(name);\n\t\treturn s ? parseInt(s) : defaultValue;\n\t}\n\t// #endregion\n\n\tconst _actionNotesTag = \"KMFAM->FAV\";\n\n\tfunction compareActions(a, b) {\n\t\ta = a.name.toLowerCase();\n\t\tb = b.name.toLowerCase();\n\t\treturn a < b ? -1 : a > b ? 1 : 0;\n\t}\n\n\tfunction execute() {\n\t\tvar groupColor = getKMVariable(\"Local Group Color\");\n\t\tvar collapseGroup = getBoolKMVariable(\"Local Collapse Group\");\n\t\tvar addKeywordsToNotes = getBoolKMVariable(\"Local Add Keywords To Notes\")\n\n\t\tvar favActionsFilePath = getKMVariable(\"kmfamPreferencesFolderPath\", true) + \"/FavoriteActions.json\";\n\t\tvar favActionsJson = FileUtils.readTextFile(favActionsFilePath);\n\t\tvar favActions = JSON.parse(favActionsJson).actions.sort(compareActions);\n\n\t\tvar resultPlist = PlistUtils.createEmptyPlist();\n\t\tvar cancelAction = PlistUtils.createCancelThisMacroAction();\n\t\tcancelAction.ActionName = \"Cancel This Macro in case you run it my mistake\";\n\t\tcancelAction.ActionNotes = _actionNotesTag;\n\t\tresultPlist.push(cancelAction);\n\n\t\tvar startingIndex = getKMIntVariable(\"Local Starting Index\", 0);\n\t\tvar endingIndex = getKMIntVariable(\"Local Ending Index\", favActions.length - 1);\n\n\t\tfor (let i = startingIndex; i <= endingIndex; i++) {\n\t\t\tconst action = favActions[i];\n\t\t\tif (action.type !== \"action\") {\n\t\t\t\tvar name = `MACRO (can't be imported): ${action.name} ${action.script}`;\n\t\t\t\tvar executeMacroAction = PlistUtils.createExecuteMacroAction(name, action.script);\n\t\t\t\texecuteMacroAction.ActionNotes = _actionNotesTag;\n\t\t\t\t// executeMacroAction.IsActive = false;\n\t\t\t\tresultPlist.push(executeMacroAction);\n\t\t\t} else {\n\t\t\t\tvar newGroup = PlistUtils.createEmptyGroupAction(action.name);\n\t\t\t\tnewGroup.ActionNotes = _actionNotesTag;\n\t\t\t\tif (groupColor)\n\t\t\t\t\tnewGroup.ActionColor = groupColor;\n\t\t\t\tif (collapseGroup)\n\t\t\t\t\tnewGroup.IsDisclosed = false;\n\t\t\t\tvar plist = PlistUtils.deserializeFromXmlString(action.script);\n\t\t\t\tif (addKeywordsToNotes && action.keywords) {\n\t\t\t\t\tvar notes = plist[0].ActionNotes;\n\t\t\t\t\tif (notes)\n\t\t\t\t\t\tplist[0].ActionNotes = `${notes} ${action.keywords}`;\n\t\t\t\t\telse\n\t\t\t\t\t\tplist[0].ActionNotes = action.keywords;\n\t\t\t\t}\n\t\t\t\tplist.forEach(action => { newGroup.Actions.push(action) });\n\t\t\t\tresultPlist.push(newGroup);\n\t\t\t}\n\t\t};\n\n\t\tvar result = PlistUtils.serializeToXmlString(resultPlist);\n\t\t// console.log(result);\n\n\t\tClipboardUtils.setClipboardString(result);\n        return `${favActions.length}`;\n\t}\n\n\t// #region ======== Runner Code =============================\n    if (inDesignMode) {\n\t\ttry {\n            return execute();\n        } catch (e) {\n            return \"Error on line: \" + e.line + \": \" + e.message;\n        } finally {\n\t\t\ttry {\n\t\t\t\tif (_editorAppName && Application(_editorAppName).isRunning) {\n\t\t\t\t\tApplication(_editorAppName).activate();\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"Error in try..finally: \" + e);\n\t\t\t}\n\t\t}\n\t} else {\n        try {\n            return execute();\n        } catch (e) {\n            return \"Error: \" + e.message;\n        }\n\t}\n\t// #endregion\n})(false);",
			"NotifyOnFailure": false
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "Abort if 'Local_Result' is '^Error:'",
			"ActionUID": 89143,
			"IsDisclosed": false,
			"ActionColor": "Yellow",
			"ElseActions": [],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "^Error:",
						"Variable": "Local_Result",
						"VariableConditionType": "Matches"
					}
				]
			},
			"ElseActionListDisclosed": false,
			"ThenActions": [
				{
					"MacroActionType": "PromptForUserInput",
					"Title": "%ExecutingMacro%",
					"ActionName": "Prompt error with cancel: 'An error has occurred'",
					"Prompt": "Macro \"%ExecutingThisMacro%\" has encountered an error: %Variable%Local_Result%",
					"ActionUID": 89144,
					"TimeOutAbortsMacro": true,
					"Buttons": [
						{
							"Button": "OK",
							"Cancel": true
						}
					],
					"Variables": []
				}
			]
		},
		{
			"MacroActionType": "CutCopyPaste",
			"IsDisclosed": false,
			"TimeOutAbortsMacro": true,
			"Action": "Paste",
			"ActionUID": 89147
		},
		{
			"MacroActionType": "ExecuteSubroutine",
			"MacroUID": "B00F37AA-F512-4F60-8A3C-15A22E22BEEB",
			"ActionUID": 109071,
			"IsDisclosed": false,
			"ActionColor": "Magenta",
			"TimeOutAbortsMacro": true,
			"ResultVariable": "VarName",
			"Parameters": [
				"true"
			]
		},
		{
			"MacroActionType": "Return",
			"IsDisclosed": false,
			"Text": "%Variable%Local_Result%",
			"ActionUID": 89983
		}
	]
}