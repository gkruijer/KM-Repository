{
	"UID": "56A8686A-EF9C-4EDE-A4E7-D4F321ECDA37",
	"CreationDate": 726702016.08646,
	"ModificationDate": 726746297.396653,
	"Triggers": [
		{
			"ReturnsValue": true,
			"MacroTriggerType": "Subroutine",
			"Parameters": [
				"Palette name",
				"New X position",
				"New Y position"
			]
		}
	],
	"Actions": [
		{
			"MacroActionType": "ExecuteJavaScriptForAutomation",
			"IncludedVariables": [
				"Palette name",
				"New X position",
				"New Y position"
			],
			"TrimResults": true,
			"Variable": "local_Result",
			"UseModernSyntax": true,
			"IncludeStdErr": false,
			"ActionUID": 15501116,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"HonourFailureSettings": true,
			"Text": "// return (() => {\n    \"use strict\";\n\n    const main = () => {\n        const\n            paletteName = kmvar.Palette_name.trim(),\n            X = kmvar.New_X_position || \"\",\n            Y = kmvar.New_Y_position || \"\";\n\n        return either(\n            alert(`Move palette named \"${paletteName}\"`)\n        )(\n            msg => msg\n        )(\n            0 < paletteName.length\n                ? [X, Y].some(\n                    s => 0 < s.trim().length && isNaN(s)\n                )\n                    ? Left(\n                        [\n                            \"X and Y must both be numeric or blank.\",\n                            `( Saw X:${X} Y:${Y} )`\n                        ].join(\"\\n\\n\\t\")\n                    )\n                    : namedPaletteToXYLR(paletteName)(\n                        [X, Y].map(Number)\n                    )\n                : Left(\"Palette name not specified.\")\n        );\n    };\n\n    // namedPaletteToXYLR :: String ->\n    // (Int, Int) -> Either String IO String\n    const namedPaletteToXYLR = paletteName =>\n        (xy) => {\n            const\n                se = Application(\"System Events\"),\n                procs = se.applicationProcesses.where({\n                    name: \"Keyboard Maestro Engine\"\n                });\n\n            return bindLR(\n                0 < procs.length\n                    ? Right(procs[0])\n                    : Left(\"Keyboard Maestro Engine not running\")\n            )(\n                namedWindowMovedLR(se)(paletteName)(xy)\n            );\n        };\n\n    // namedWindowMovedLR :: System Events -> String ->\n    // (Num, Num) -> KM Engine Process -> IO Either String String\n    const namedWindowMovedLR = se =>\n        paletteName => ([x, y]) =>\n            procKME => {\n                const\n                    windowName = (\n                        \"global\" === paletteName.toLocaleLowerCase()\n                            ? \"Keyboard Maestro\"\n                            : paletteName\n                    ),\n                    paletteWin = procKME.windows\n                    .byName(windowName);\n\n                return paletteWin.exists()\n                    ? Right(\n                        (() => {\n                            const\n                                xy = paletteWin.position(),\n                                newXY = [x || xy[0], y || xy[1]];\n\n                            return (\n                                paletteWin.position = newXY,\n                                se.perform(paletteWin.actions.AXRaise),\n                                `Palette \"${paletteName}\" moved to ${newXY}.`\n                            );\n                        })()\n                    )\n                    : Left(\n                        [\n                            \"Palette not found as spelled:\",\n                            `\\t\"${paletteName}\"`\n                        ].join(\"\\n\")\n                    );\n            };\n\n\n    // ----------------------- JXA -----------------------\n\n    // alert :: String => String -> IO String\n    const alert = title =>\n        s => {\n            const sa = Object.assign(\n                Application(\"System Events\"), {\n                    includeStandardAdditions: true\n                });\n\n            return (\n                sa.activate(),\n                sa.displayDialog(s, {\n                    withTitle: title,\n                    buttons: [\"OK\"],\n                    defaultButton: \"OK\"\n                }),\n                s\n            );\n        };\n\n    // --------------------- GENERIC ---------------------\n\n    // Left :: a -> Either a b\n    const Left = x => ({\n        type: \"Either\",\n        Left: x\n    });\n\n    // Right :: b -> Either a b\n    const Right = x => ({\n        type: \"Either\",\n        Right: x\n    });\n\n    // bindLR (>>=) :: Either a ->\n    // (a -> Either b) -> Either b\n    const bindLR = m =>\n        mf => m.Left ? (\n            m\n        ) : mf(m.Right);\n\n    // either :: (a -> c) -> (b -> c) -> Either a b -> c\n    const either = fl =>\n        // Application of the function fl to the\n        // contents of any Left value in e, or\n        // the application of fr to its Right value.\n        fr => e => e.Left ? (\n            fl(e.Left)\n        ) : fr(e.Right);\n\n    return main();\n// })();\n"
		},
		{
			"MacroActionType": "Return",
			"ActionUID": 15502640,
			"Text": "%Variable%local_Result%"
		}
	],
	"Name": "Move a Named Keyboard Maestro Palette",
	"CustomIconData": "KMEC=Rounded=KMCOLOR:239,239,239,255=â†“=86=0=2=0=KMCOLOR:255,0,0,255"
}