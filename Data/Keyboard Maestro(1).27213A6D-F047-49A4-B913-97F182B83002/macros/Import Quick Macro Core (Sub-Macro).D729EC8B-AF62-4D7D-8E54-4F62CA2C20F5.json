{
	"CreationDate": 663356137.058363,
	"UID": "D729EC8B-AF62-4D7D-8E54-4F62CA2C20F5",
	"Name": "Import Quick Macro Core (Sub-Macro)",
	"Triggers": [
		{
			"ReturnsValue": true,
			"MacroTriggerType": "Subroutine",
			"Parameters": [
				"Local_Action",
				"Local_UUID"
			]
		}
	],
	"ModificationDate": 663424262.19804,
	"Actions": [
		{
			"MacroActionType": "Comment",
			"Title": "Import Quick Macro Core (Sub-Macro) v2.0.1",
			"StyledText": "\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\tcnRmZAAAAAADAAAAAgAA\n\t\t\t\t\t\t\tAAcAAABUWFQucnRmAQAA\n\t\t\t\t\t\t\tAC4LAwAAKwAAAAEAAAAD\n\t\t\t\t\t\t\tAwAAe1xydGYxXGFuc2lc\n\t\t\t\t\t\t\tYW5zaWNwZzEyNTJcY29j\n\t\t\t\t\t\t\tb2FydGYyNTEzClxjb2Nv\n\t\t\t\t\t\t\tYXRleHRzY2FsaW5nMFxj\n\t\t\t\t\t\t\tb2NvYXBsYXRmb3JtMHtc\n\t\t\t\t\t\t\tZm9udHRibFxmMFxmc3dp\n\t\t\t\t\t\t\tc3NcZmNoYXJzZXQwIEhl\n\t\t\t\t\t\t\tbHZldGljYS1Cb2xkO1xm\n\t\t\t\t\t\t\tMVxmc3dpc3NcZmNoYXJz\n\t\t\t\t\t\t\tZXQwIEhlbHZldGljYTt9\n\t\t\t\t\t\t\tCntcY29sb3J0Ymw7XHJl\n\t\t\t\t\t\t\tZDI1NVxncmVlbjI1NVxi\n\t\t\t\t\t\t\tbHVlMjU1O30Ke1wqXGV4\n\t\t\t\t\t\t\tcGFuZGVkY29sb3J0Ymw7\n\t\t\t\t\t\t\tO30KXHBhcmRcdHg1NjBc\n\t\t\t\t\t\t\tdHgxMTIwXHR4MTY4MFx0\n\t\t\t\t\t\t\teDIyNDBcdHgyODAwXHR4\n\t\t\t\t\t\t\tMzM2MFx0eDM5MjBcdHg0\n\t\t\t\t\t\t\tNDgwXHR4NTA0MFx0eDU2\n\t\t\t\t\t\t\tMDBcdHg2MTYwXHR4Njcy\n\t\t\t\t\t\t\tMFxwYXJkaXJuYXR1cmFs\n\t\t\t\t\t\t\tXHBhcnRpZ2h0ZW5mYWN0\n\t\t\t\t\t\t\tb3IwCgpcZjBcYlxmczI4\n\t\t\t\t\t\t\tIFxjZjAgTmFtZQpcZjFc\n\t\t\t\t\t\t\tYjAgOiBJbXBvcnQgUXVp\n\t\t\t\t\t\t\tY2sgTWFjcm8gQ29yZSAo\n\t\t\t\t\t\t\tU3ViLU1hY3JvKVwKClxm\n\t\t\t\t\t\t\tMFxiIFZlcnNpb24KXGYx\n\t\t\t\t\t\t\tXGIwIDogMi4wLjFcCgpc\n\t\t\t\t\t\t\tZjBcYiBVcGRhdGVkClxm\n\t\t\t\t\t\t\tMVxiMCA6IDIwMjIvMDEv\n\t\t\t\t\t\t\tMDkgMDQ6MzAgUFRcCgpc\n\t\t\t\t\t\t\tZjBcYiBCeQpcZjFcYjAg\n\t\t\t\t\t\t\tOiBEYW4gVGhvbWFzXApc\n\t\t\t\t\t\t\tCgpcZjBcYiBQVVJQT1NF\n\t\t\t\t\t\t\tClxmMVxiMCA6XApcClRo\n\t\t\t\t\t\t\taXMgaXMgdXNlZCBpbnRl\n\t\t\t\t\t\t\tcm5hbGx5LCBhbmQgeW91\n\t\t\t\t\t\t\tIHdvbid0IGV2ZXIgcnVu\n\t\t\t\t\t\t\tIHRoaXMgeW91cnNlbGYu\n\t\t\t\t\t\t\tXApcCgpcZjBcYiBWRVJT\n\t\t\t\t\t\t\tSU9OIEhJU1RPUlkKXGYx\n\t\t\t\t\t\t\tXGIwIDpcCjIuMC4xIC0g\n\t\t\t\t\t\t\tRml4ZWQgYSBidWcgaGFu\n\t\t\t\t\t\t\tZGxpbmcgR2xvYmFsIE1h\n\t\t\t\t\t\t\tY3JvIE5hbWVzIHRoYXQg\n\t\t\t\t\t\t\tYXJlIGJsYW5rICh0aGlz\n\t\t\t\t\t\t\tIGhhcHBlbnMgd2hlbiB0\n\t\t\t\t\t\t\taGV5IGhhdmUgdGhlICJk\n\t\t\t\t\t\t\tZWZhdWx0IiBuYW1lKS5c\n\t\t\t\t\t\t\tCjIuMCAtIEluaXRpYWwg\n\t\t\t\t\t\t\tdmVyc2lvbi59AQAAACMA\n\t\t\t\t\t\t\tAAABAAAABwAAAFRYVC5y\n\t\t\t\t\t\t\tdGYQAAAAh9XaYbYBAAAA\n\t\t\t\t\t\t\tAAAAAAAAAA==\n\t\t\t\t\t\t\t41E4D515-C065-4C24-9859-EA2479C52CC9\n\t\t\t\t\t\t\t",
			"ActionColor": "Yellow",
			"ActionUID": 235111
		},
		{
			"MacroActionType": "ExecuteJavaScriptForAutomation",
			"TrimResults": true,
			"StopOnFailure": false,
			"Variable": "Local_Result",
			"IncludeStdErr": false,
			"ActionUID": 231350,
			"UseText": true,
			"TrimResultsNew": true,
			"TimeOutAbortsMacro": true,
			"Path": "",
			"DisplayKind": "Variable",
			"IsDisclosed": false,
			"HonourFailureSettings": true,
			"Text": "(function (inDesignMode, designModeParams) {\n\t'use strict';\n\n\tconst _editorAppName = \"Code\";\n\n\tvar FileUtils = (function() {\n\t\treturn {\n\t\t\tfileExists: function(path) {\n\t\t\t\tvar result = this.getFileOrFolderExists(path);\n\t\t\t\treturn result.exists && result.isFile;\n\t\t\t},\n\n\t\t\tgetFileOrFolderExists: function(path) {\n\t\t\t\tvar isDirectory = Ref();\n\t\t\t\tvar exists = $.NSFileManager.defaultManager\n\t\t\t\t\t.fileExistsAtPathIsDirectory(path, isDirectory);\n\t\t\t\treturn {\n\t\t\t\t\texists: exists,\n\t\t\t\t\tisFile: !isDirectory[0]\n\t\t\t\t};\n\t\t\t},\n\n\t\t\treadTextFile: function(strPath) {\n\t\t\t\tvar error;\n\t\t\t\tvar str = ObjC.unwrap(\n\t\t\t\t\t$.NSString.stringWithContentsOfFileEncodingError(\n\t\t\t\t\t\t$(strPath).stringByStandardizingPath,\n\t\t\t\t\t\t$.NSUTF8StringEncoding,\n\t\t\t\t\t\terror\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tif (error)\n\t\t\t\t\tthrow Error('Could not read file \"' + strPath + '\"');\n\t\t\t\treturn str;\n\t\t\t},\n\t\t};\n\t})();\n\n\tvar PlistUtils = (function () {\n\t\t// #region ======== Private Stuff ===========================\n\n\t\tvar _currentApp;\n\t\tvar _dataNodeToken = \"41E4D515-C065-4C24-9859-EA2479C52CC9\";\n\n\t\tvar _kmObjectType_action = \"action\";\n\t\tvar _kmObjectType_group = \"group\";\n\t\tvar _kmObjectType_macro = \"macro\";\n\n\t\tvar _kmActionsXmlClipboardStringType = \"com.stairways.keyboardmaestro.actionarray\";\n\t\tvar _kmGroupsXmlClipboardStringType = \"com.stairways.keyboardmaestro.macrogroupsarray\";\n\t\tvar _kmMacrosXmlClipboardStringType = \"com.stairways.keyboardmaestro.macrosarray\";\n\n\t\tvar _kmClipboardStringTypes = {}\n\t\t_kmClipboardStringTypes[_kmObjectType_action] = _kmActionsXmlClipboardStringType;\n\t\t_kmClipboardStringTypes[_kmObjectType_group] = _kmGroupsXmlClipboardStringType;\n\t\t_kmClipboardStringTypes[_kmObjectType_macro] = _kmMacrosXmlClipboardStringType;\n\n\t\tfunction _cleanupXmlAfterDeserialization(xml) {\n\t\t\tvar result = xml.replace(/<real>(-?\\d+)(\\.0)?<\\/real>/g, \"<integer>$1</integer>\");\n\t\t\tvar result = result.replace(/(<key>CreationDate<\\/key>[\\W]*<)(integer>)(\\d+)(<\\/integer>)/g, \"$1real>$3.0</real>\");\n\t\t\tvar result = result.replace(/(<key>TimeOutPeriod<\\/key>[\\W]*<)(integer)(>\\d+<\\/)(integer)(>)/g, \"$1real$3real$5\");\n\t\t\tvar result = result.replace(/(<key>NSSuperScript<\\/key>[\\W]*<)(real)(>-?\\d+<\\/)(real)(>)/g, \"$1integer$3integer$5\");\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _deserializeFromXmlString(xml) {\n\t\t\tvar nsError = $();\n\t\t\tvar result = ObjC.deepUnwrap(\n\t\t\t\t$.NSPropertyListSerialization.propertyListWithDataOptionsFormatError(\n\t\t\t\t\t$(xml).dataUsingEncoding($.NSUTF8StringEncoding), 0, 0, nsError));\n\t\t\tif (!result)\n\t\t\t\tthrow Error(_getErrorMessage(nsError, \"Could not convert string to plist\"));\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _deTokenizeXmlDataNodes(xml) {\n\t\t\tvar regex = new RegExp(\"(<string>[\\\\W]*\" + _dataNodeToken + \")\", \"g\");\n\t\t\tvar result = xml.replace(regex, \"<data>\");\n\n\t\t\tregex = new RegExp(_dataNodeToken + \"[\\\\W]*<\\\\/string>\", \"g\");\n\t\t\treturn result.replace(regex, \"</data>\");\n\t\t}\n\n\t\tfunction _getAppSupportFolderName() {\n\t\t\tif (!_currentApp) {\n\t\t\t\t_currentApp = Application.currentApplication();\n\t\t\t\t_currentApp.includeStandardAdditions = true;\n\t\t\t}\n\t\t\treturn _currentApp.pathTo('application support', { from: 'user domain' });\n\t\t}\n\n\t\tfunction _clipboardContainsType(type) {\n\t\t\treturn _getClipboardTypes().indexOf(type) >= 0;\n\t\t}\n\n\t\tfunction _getClipboardStringForType(type, throwIfNotFound) {\n\t\t\tif (_clipboardContainsType(type))\n\t\t\t\treturn ObjC.unwrap(\n\t\t\t\t\t$.NSPasteboard.generalPasteboard\n\t\t\t\t\t\t.stringForType(type));\n\t\t\tif (throwIfNotFound)\n\t\t\t\tthrow Error(\"No clipboard data for specified type\");\n\t\t\treturn \"\";\n\t\t}\n\n\t\tfunction _findMacro(plist, macroUUID) {\n\t\t\tvar result = null;\n\t\t\t_iterateMacros(plist, (macro, group) => {\n\t\t\t\tif (macro.UID === macroUUID) {\n\t\t\t\t\tresult = {\n\t\t\t\t\t\tmacro: macro,\n\t\t\t\t\t\tgroup: group\n\t\t\t\t\t};\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _getClipboardTypes() {\n\t\t\tvar items = $.NSPasteboard.generalPasteboard.pasteboardItems;\n\t\t\ttry {\n\t\t\t\treturn ObjC.deepUnwrap(items.js[0].types) ?? [];\n\t\t\t} catch (error) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\tfunction _getErrorMessage(nsError, message) {\n\t\t\ttry {\n\t\t\t\treturn message + \". Error: \" + ObjC.unwrap(nsError.localizedDescription);\n\t\t\t} catch (e) {\n\t\t\t\treturn message;\n\t\t\t}\n\t\t}\n\n\t\tfunction _getKMClipboardStringTypeForObjectType(objectType) {\n\t\t\tvar result = _kmClipboardStringTypes[objectType];\n\t\t\tif (!result)\n\t\t\t\tthrow Error(\"'\" + objectType + \"' is not a valid KM Object Type\");\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _getKMPlistXmlObjectType(xml) {\n\t\t\tif (xml.indexOf(\"<key>ToggleMacroUID</key>\") > 0)\n\t\t\t\treturn _kmObjectType_group;\n\t\t\tif (xml.indexOf(\"<key>Triggers</key>\") > 0)\n\t\t\t\treturn _kmObjectType_macro;\n\t\t\treturn _kmObjectType_action;\n\t\t}\n\n\t\tfunction _getMacroTriggers(plist) {\n\t\t\tvar result = [];\n\t\t\t_iterateMacros(plist, (macro, group) => {\n\t\t\t\tif (macro.Triggers && macro.Triggers.length > 0) {\n\t\t\t\t\tvar info = {\n\t\t\t\t\t\tmacroUUID: macro.UID,\n\t\t\t\t\t\tmacroName: macro.Name,\n\t\t\t\t\t\tmacroTriggers: macro.Triggers\n\t\t\t\t\t};\n\t\t\t\t\tif (group) {\n\t\t\t\t\t\tinfo.groupUUID = group.UID,\n\t\t\t\t\t\t\tinfo.groupName = group.Name\n\t\t\t\t\t}\n\t\t\t\t\tresult.push(info);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _getPlistContentType(plist) {\n\t\t\tvar arraySuffix;\n\t\t\tvar item;\n\t\t\tif (Array.isArray(plist)) {\n\t\t\t\tif (plist.length === 0)\n\t\t\t\t\treturn \"empty\";\n\t\t\t\titem = plist[0];\n\t\t\t\tarraySuffix = \"s\";\n\t\t\t} else {\n\t\t\t\tif (plist.MacroGroups)\n\t\t\t\t\treturn \"all\";\n\t\t\t\titem = plist;\n\t\t\t\tarraySuffix = \"\";\n\t\t\t}\n\n\t\t\tif (item.Macros != null || item.ToggleMacroUID != null)\n\t\t\t\treturn \"group\" + arraySuffix;\n\t\t\tif (item.Actions != null)\n\t\t\t\treturn \"macro\" + arraySuffix;\n\t\t\tif (item.MacroActionType != null)\n\t\t\t\treturn \"action\" + arraySuffix;\n\t\t\tthrow new Error(\"Unknown plist item type\");\n\t\t}\n\n\t\tfunction _iterateMacros(plist, callback) {\n\n\t\t\tfunction processMacro(macro, group) {\n\t\t\t\treturn callback(macro, group) !== false;\n\t\t\t}\n\n\t\t\tfunction processMacros(macros, group) {\n\t\t\t\tif (!macros)\n\t\t\t\t\treturn true;\n\t\t\t\tfor (let i = 0; i < macros.length; i++) {\n\t\t\t\t\tif (!processMacro(macros[i], group))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tfunction processGroup(group) {\n\t\t\t\treturn processMacros(group.Macros, group);\n\t\t\t}\n\n\t\t\tfunction processGroups(groups) {\n\t\t\t\tfor (let i = 0; i < groups.length; i++) {\n\t\t\t\t\tif (!processGroup(groups[i]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tswitch (_getPlistContentType(plist)) {\n\t\t\t\tcase \"all\":\n\t\t\t\t\treturn processGroups(plist.MacroGroups);\n\t\t\t\tcase \"groups\":\n\t\t\t\t\treturn processGroups(plist);\n\t\t\t\tcase \"group\":\n\t\t\t\t\treturn processGroup(plist);\n\t\t\t\tcase \"macros\":\n\t\t\t\t\treturn processMacros(plist);\n\t\t\t\tcase \"macro\":\n\t\t\t\t\treturn processMacro(plist);\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\tfunction _reOrderJsonProperties(json) {\n\n\t\t\tfunction moveActionPropertyToTop(jsonArray, propertyName) {\n\n\t\t\t\tfunction findProperty(startingIndex) {\n\t\t\t\t\tfor (var i = startingIndex; i < jsonArray.length; i++) {\n\t\t\t\t\t\tvar line = jsonArray[i];\n\t\t\t\t\t\tvar regex = new RegExp('^([\\\\t]+)\"' + propertyName + '\":');\n\t\t\t\t\t\tvar match = line.match(regex);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\t\t\tleadingTabs: match[1]\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\tfunction findActionStartIndex(startingIndex, leadingTabs) {\n\t\t\t\t\tvar startingLineRegex = new RegExp(\"^(\" + leadingTabs.substring(0, leadingTabs.length - 1) + \"[^\\\\t])\");\n\t\t\t\t\tfor (var i = startingIndex - 1; i >= 0; i--) {\n\t\t\t\t\t\tvar line = jsonArray[i];\n\t\t\t\t\t\tvar match = line.match(startingLineRegex);\n\t\t\t\t\t\tif (match) {\n\t\t\t\t\t\t\tif (!match[1].endsWith(\"{\"))\n\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\treturn i + 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\n\t\t\t\tfunction moveProperty(fromIndex, toIndex) {\n\t\t\t\t\tvar endsWithComma = jsonArray[fromIndex].endsWith(\",\");\n\t\t\t\t\tif (!endsWithComma)\n\t\t\t\t\t\tjsonArray[fromIndex] = jsonArray[fromIndex] + \",\";\n\t\t\t\t\tjsonArray.splice(toIndex, 0, jsonArray.splice(fromIndex, 1)[0]);\n\n\t\t\t\t\t// If we moved the last property of the action, then the new last\n\t\t\t\t\t// property line probably needs to have its trailing comma removed.\n\t\t\t\t\tif (!endsWithComma) {\n\t\t\t\t\t\tvar line = jsonArray[fromIndex];\n\t\t\t\t\t\tif (line.endsWith(\",\"))\n\t\t\t\t\t\t\tjsonArray[fromIndex] = line.substring(0, line.length - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// moveActionPropertyToTop()\n\t\t\t\tvar i = 0;\n\t\t\t\twhile (i < jsonArray.length) {\n\t\t\t\t\tvar propertyLineInfo = findProperty(i);\n\t\t\t\t\tif (!propertyLineInfo)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tvar actionStartIndex = findActionStartIndex(propertyLineInfo.index, propertyLineInfo.leadingTabs);\n\t\t\t\t\tif (actionStartIndex >= 0 && actionStartIndex < propertyLineInfo.index)\n\t\t\t\t\t\tmoveProperty(propertyLineInfo.index, actionStartIndex);\n\n\t\t\t\t\ti = propertyLineInfo.index + 1;\n\t\t\t\t}\n\t\t\t} // moveActionPropertyToTop()\n\n\t\t\t// _reOrderJsonProperties()\n\t\t\tif (json.indexOf(\"\\t\") < 0)\n\t\t\t\tthrow Error(\"ReOrderJsonProperties expects the JSON parameter to be stringified with tabs\");\n\t\t\tvar jsonArray = json.split(\"\\n\");\n\n\t\t\t// NOTE: These are backwards - the one we want top-most is last in the array.\n\t\t\t[\"ActionName\", \"Title\", \"MacroActionType\"].forEach(function (propertyName) {\n\t\t\t\tmoveActionPropertyToTop(jsonArray, propertyName);\n\t\t\t});\n\t\t\treturn jsonArray.join(\"\\n\");\n\t\t} // _reOrderJsonProperties()\n\n\t\tfunction _serializeToXmlString(plist) {\n\t\t\tvar data = $.NSPropertyListSerialization.dataWithPropertyListFormatOptionsError(\n\t\t\t\t$(plist), $.NSPropertyListXMLFormat_v1_0, 0, null);\n\t\t\tvar nsstring = $.NSString.alloc.initWithDataEncoding(data, $.NSUTF8StringEncoding);\n\t\t\tvar result = $(nsstring).js;\n\t\t\treturn result;\n\t\t}\n\n\t\tfunction _setClipboardStringForType(str, type) {\n\t\t\tvar clipboard = $.NSPasteboard.generalPasteboard;\n\t\t\tclipboard.clearContents;\n\t\t\tclipboard.setStringForType($(str), $(type));\n\t\t}\n\n\t\tfunction _tokenizeXmlDataNodes(xml) {\n\t\t\treturn xml.replace(/(<data>)([\\W]*)([^<]*)(<\\/data>)/g,\n\t\t\t\t\"<string>$2\" + _dataNodeToken + \"$2$3\" + _dataNodeToken + \"$2</string>\");\n\t\t}\n\n\t\t// #endregion\n\n\t\t// #region ======== Stuff for Intellisense ==================\n\n\t\t/**\n\t\t * A Plist object.\n\t\t */\n\t\tclass Plist { }\n\n\t\t/**\n\t\t * A macro plist object.\n\t\t */\n\t\tclass Macro { }\n\n\t\t/**\n\t\t * A group plist object\n\t\t */\n\t\tclass Group { }\n\n\t\t/**\n\t\t * Callback function\n\t\t * @param {Macro} macro\n\t\t * @param {Group} [group]\n\t\t * @returns {bool} Return false if you want to abort the iteration.\n\t\t */\n\t\tfunction CallbackMacroGroup(macro, group) { }\n\t\t// #endregion\n\n\t\treturn {\n\t\t\tKMObjectType_action: _kmObjectType_action,\n\t\t\tKMObjectType_group: _kmObjectType_group,\n\t\t\tKMObjectType_macro: _kmObjectType_macro,\n\n\t\t\tcomparePlistToXmlString: function (plist, origXml, failOptions) {\n\t\t\t\tvar testXml = this.serializeToXmlString(plist);\n\t\t\t\tif (testXml === origXml)\n\t\t\t\t\treturn;\n\n\t\t\t\tvar savedToFile = false;\n\t\t\t\tvar savedOrigFilePath = null;\n\t\t\t\tvar savedTestFilePath = null;\n\t\t\t\tvar defaultFailOptions = this.getComparePlistFailDefaultOptions();\n\t\t\t\tif (!failOptions)\n\t\t\t\t\tfailOptions = defaultFailOptions;\n\n\t\t\t\tif (failOptions && failOptions.saveFiles) {\n\n\t\t\t\t\tvar saveFolderPath = failOptions.saveFolderPath || defaultFailOptions.saveFolderPath;\n\t\t\t\t\tif (saveFolderPath.substring(saveFolderPath.length - 1) !== \"/\")\n\t\t\t\t\t\tsaveFolderPath += \"/\";\n\n\t\t\t\t\tsavedOrigFilePath = saveFolderPath + (failOptions.saveOrigFileName || defaultFailOptions.saveOrigFileName);\n\t\t\t\t\tsavedTestFilePath = saveFolderPath + (failOptions.saveTestFileName || defaultFailOptions.saveTestFileName);\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.writeTextFile(origXml, savedOrigFilePath);\n\t\t\t\t\t\tthis.writeTextFile(testXml, savedTestFilePath);\n\t\t\t\t\t\tsavedToFile = true;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar errorMessage = failOptions && failOptions.errorMessage ? failOptions.errorMessage : defaultFailOptions.errorMessage;\n\t\t\t\tif (savedToFile)\n\t\t\t\t\terrorMessage = errorMessage +\n\t\t\t\t\t\t\"\\nSaved original XML to: '\" + savedOrigFilePath + \"'\" +\n\t\t\t\t\t\t\"\\nSaved test XML to: '\" + savedTestFilePath + \"'\";\n\t\t\t\tthrow Error(errorMessage);\n\t\t\t},\n\n\t\t\tconvertJsonStringToXmlString: function (json) {\n\t\t\t\tvar plist = JSON.parse(json);\n\t\t\t\treturn this.serializeToXmlString(plist);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Converts an XML string to a JSON string\n\t\t\t * @param {string} xml The XML string\n\t\t\t * @returns {string} The JSON string\n\t\t\t */\n\t\t\tconvertXmlStringToJsonString: function (xml) {\n\t\t\t\tvar plist = this.deserializeFromXmlString(xml);\n\t\t\t\treturn JSON.stringify(plist, null, \"\\t\");\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Reads a text XML file and deserializes it into a JSON string\n\t\t\t * @param {string} path The path to the XML file\n\t\t\t * @returns {string} The JSON string\n\t\t\t */\n\t\t\tconvertXmlFileToJsonString: function(path) {\n\t\t\t\treturn this.convertXmlStringToJsonString(this.readTextFile(path));\n\t\t\t},\n\n\t\t\tconvertXmlStringToJsonStringAndValidate: function (xml, failOptions) {\n\t\t\t\tvar json = this.convertXmlStringToJsonString(xml);\n\t\t\t\tvar plist = JSON.parse(json);\n\t\t\t\tthis.comparePlistToXmlString(plist, xml, failOptions || this.getCompareJsonFailDefaultOptions());\n\t\t\t\treturn json;\n\t\t\t},\n\n\t\t\tcreateCancelThisMacroAction: function () {\n\t\t\t\treturn _deserializeFromXmlString(\n\t\t\t\t\t`<plist version=\"1.0\">` +\n\t\t\t\t\t`<dict>` +\n\t\t\t\t\t`\t<key>Action</key>` +\n\t\t\t\t\t`\t<string>CancelThisMacro</string>` +\n\t\t\t\t\t`\t<key>ActionColor</key>` +\n\t\t\t\t\t`\t<string>Red</string>` +\n\t\t\t\t\t`\t<key>IsDisclosed</key>` +\n\t\t\t\t\t`\t<false/>` +\n\t\t\t\t\t`\t<key>MacroActionType</key>` +\n\t\t\t\t\t`\t<string>Cancel</string>` +\n\t\t\t\t\t`</dict>` +\n\t\t\t\t\t`</plist>`);\n\t\t\t},\n\n\t\t\tcreateEmptyGroupAction: function (actionName) {\n\t\t\t\tvar result = _deserializeFromXmlString(\n\t\t\t\t\t\"<plist version='1.0'> \\n\" +\n\t\t\t\t\t\"<dict> \\n\" +\n\t\t\t\t\t\"\t<key>ActionName</key> \\n\" +\n\t\t\t\t\t\"\t<string></string> \\n\" +\n\t\t\t\t\t\"\t<key>Actions</key> \\n\" +\n\t\t\t\t\t\"\t<array/> \\n\" +\n\t\t\t\t\t\"\t<key>MacroActionType</key> \\n\" +\n\t\t\t\t\t\"\t<string>Group</string> \\n\" +\n\t\t\t\t\t\"\t<key>TimeOutAbortsMacro</key> \\n\" +\n\t\t\t\t\t\"\t<true/> \\n\" +\n\t\t\t\t\t\"</dict> \\n\" +\n\t\t\t\t\t\"</plist>\");\n\t\t\t\tresult.ActionName = actionName;\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tcreateEmptyMacro: function (macroName) {\n\t\t\t\tvar result = _deserializeFromXmlString(\n\t\t\t\t\t`<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n` + \n\t\t\t\t\t`<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n` + \n\t\t\t\t\t`<plist version=\"1.0\">\\n` + \n\t\t\t\t\t`<dict>\\n` + \n\t\t\t\t\t`\t<key>Actions</key>\\n` + \n\t\t\t\t\t`\t<array/>\\n` + \n\t\t\t\t\t`\t<key>Name</key>\\n` + \n\t\t\t\t\t`\t<string></string>\\n` + \n\t\t\t\t\t`\t<key>Triggers</key>\\n` + \n\t\t\t\t\t`\t<array/>\\n` + \n\t\t\t\t\t`\t<key>UID</key>\\n` + \n\t\t\t\t\t`\t<string>8EC3BB01-A839-4632-9868-71BAD473DE81</string>\\n` + \n\t\t\t\t\t`</dict>\\n` + \n\t\t\t\t\t`</plist>`);\n\t\t\t\tresult.Name = macroName;\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tcreateExecuteMacroAction: function (actionName, macroUID) {\n\t\t\t\tvar result = _deserializeFromXmlString(\n\t\t\t\t\t'<plist version=\"1.0\"> \\n' +\n\t\t\t\t\t'<dict> \\n' +\n\t\t\t\t\t'\t<key>ActionColor</key> \\n' +\n\t\t\t\t\t'\t<string>Red</string> \\n' +\n\t\t\t\t\t'\t<key>ActionName</key> \\n' +\n\t\t\t\t\t'\t<string></string> \\n' +\n\t\t\t\t\t'\t<key>Asynchronously</key> \\n' +\n\t\t\t\t\t'\t<false/> \\n' +\n\t\t\t\t\t'\t<key>MacroActionType</key> \\n' +\n\t\t\t\t\t'\t<string>ExecuteMacro</string> \\n' +\n\t\t\t\t\t'\t<key>MacroUID</key> \\n' +\n\t\t\t\t\t'\t<string></string> \\n' +\n\t\t\t\t\t'\t<key>TimeOutAbortsMacro</key> \\n' +\n\t\t\t\t\t'\t<true/> \\n' +\n\t\t\t\t\t'\t<key>UseParameter</key> \\n' +\n\t\t\t\t\t'\t<false/> \\n' +\n\t\t\t\t\t'</dict> \\n' +\n\t\t\t\t\t'</plist>`');\n\t\t\t\tresult.ActionName = actionName;\n\t\t\t\tresult.MacroUID = macroUID;\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tcreateEmptyPlist: function () {\n\t\t\t\treturn _deserializeFromXmlString(\n\t\t\t\t\t\"<plist version='1.0'> \\n\" +\n\t\t\t\t\t\"<array> \\n\" +\n\t\t\t\t\t\"</array> \\n\" +\n\t\t\t\t\t\"</plist>\");\n\t\t\t},\n\n\t\t\tdeserializeFromJsonString: function (json) {\n\t\t\t\treturn JSON.parse(json);\n\t\t\t},\n\n\t\t\tdeserializeFromJsonFile: function (path) {\n\t\t\t\treturn this.deserializeFromJsonString(this.readTextFile(path));\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Reads a text XML file and deserializes it into a plist object\n\t\t\t * @param {string} path The path to the XML file\n\t\t\t * @returns {Plist} A plist object\n\t\t\t */\n\t\t\tdeserializeFromXmlFile: function (path) {\n\t\t\t\treturn this.deserializeFromXmlString(this.readTextFile(path));\n\t\t\t},\n\n\t\t\tdeserializeFromXmlFileAndValidate: function (path, failOptions) {\n\t\t\t\treturn this.deserializeFromXmlStringAndValidate(this.readTextFile(path), failOptions);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deserializes an XML string into a plist object\n\t\t\t * @param {string} xml The XML string\n\t\t\t * @returns {Plist} A plist object\n\t\t\t */\n\t\t\tdeserializeFromXmlString: function (xml) {\n\t\t\t\tvar result = _tokenizeXmlDataNodes(xml);\n\t\t\t\treturn _deserializeFromXmlString(result);\n\t\t\t},\n\n\t\t\tdeserializeFromXmlStringAndValidate: function (xml, failOptions) {\n\t\t\t\tvar result = this.deserializeFromXmlString(xml);\n\t\t\t\tthis.comparePlistToXmlString(result, xml, failOptions);\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Deserializes the KM Macros source file into a plist object\n\t\t\t * @returns {Plist} A plist object\n\t\t\t */\n\t\t\tdeserializeKMAllMacrosSourceFile: function () {\n\t\t\t\tvar xml = this.readKMAllMacrosSourceFileAsXml();\n\t\t\t\treturn this.deserializeFromXmlString(xml);\n\t\t\t},\n\n\t\t\tdeserializeKMAllMacrosSourceFileAndValidate: function (failOptions) {\n\t\t\t\tvar xml = this.readKMAllMacrosSourceFileAsXml();\n\t\t\t\treturn this.deserializeFromXmlStringAndValidate(xml, failOptions);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Find a macro with the specified UUID.\n\t\t\t * @param {Plist} plist The plist to search\n\t\t\t * @param {string} macroUUID The UUID to find.\n\t\t\t * @returns {Object} An object literal containing {macro, group} or null if not found\n\t\t\t */\n\t\t\tfindMacro: function (plist, macroUUID) {\n\t\t\t\treturn _findMacro(plist, macroUUID);\n\t\t\t},\n\n\t\t\tgetCompareJsonFailDefaultOptions: function () {\n\t\t\t\treturn {\n\t\t\t\t\terrorMessage: \"Plist-to-JSON Conversion Error: Converted JSON back to XML, does not match Original XML.\",\n\t\t\t\t\tsaveFiles: true,\n\t\t\t\t\tsaveFolderPath: \"/tmp/\",\n\t\t\t\t\tsaveOrigFileName: \"PlistUtils_CompareFailure_Original.plist\",\n\t\t\t\t\tsaveTestFileName: \"PlistUtils_CompareFailure_Test.plist\"\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tgetComparePlistFailDefaultOptions: function () {\n\t\t\t\treturn {\n\t\t\t\t\terrorMessage: \"Plist Conversion Error: Converted Plist does not match Original XML.\",\n\t\t\t\t\tsaveFiles: true,\n\t\t\t\t\tsaveFolderPath: \"/tmp/\",\n\t\t\t\t\tsaveOrigFileName: \"PlistUtils_CompareFailure_Original.plist\",\n\t\t\t\t\tsaveTestFileName: \"PlistUtils_CompareFailure_Test.plist\"\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tgetInitialCommentFromMacro: function (macro) {\n\t\t\t\tvar results = [];\n\t\t\t\tif (!macro.Actions || macro.Actions.length === 0)\n\t\t\t\t\treturn null;\n\n\t\t\t\tvar action = macro.Actions[0];\n\t\t\t\tif (action.MacroActionType !== \"Comment\")\n\t\t\t\t\treturn null;\n\n\t\t\t\treturn {\n\t\t\t\t\tname: action.ActionName || action.Title || \"\",\n\t\t\t\t\ttitle: action.Title || \"\",\n\t\t\t\t\ttext: action.Text || \"\"\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tgetClipboardString: function (throwIfNotFound) {\n\t\t\t\treturn _getClipboardStringForType($.NSPasteboardTypeString.js, throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetKMActionsXmlFromClipboard: function (throwIfNotFound) {\n\t\t\t\treturn _getClipboardStringForType(_kmActionsXmlClipboardStringType, throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetKMClipboardStringTypeForObjectType: function (objectType) {\n\t\t\t\tvar result = _kmClipboardStringTypes[objectType];\n\t\t\t\tif (!result)\n\t\t\t\t\tthrow Error(\"'\" + objectType + \"' is not a valid KM Object Type\");\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tgetKMGroupsXmlFromClipboard: function (throwIfNotFound) {\n\t\t\t\treturn _getClipboardStringForType(_kmGroupsXmlClipboardStringType, throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetKMMacrosXmlFromClipboard: function (throwIfNotFound) {\n\t\t\t\treturn _getClipboardStringForType(_kmMacrosXmlClipboardStringType, throwIfNotFound);\n\t\t\t},\n\n\t\t\tgetKMPlistXmlObjectType: function (xml) {\n\t\t\t\treturn _getKMPlistXmlObjectType(xml);\n\t\t\t},\n\n\t\t\t// File must contain one macro only, or exception is thrown.\n\t\t\tgetMacroFromKMMacrosFile: function (path) {\n\t\t\t\tvar plist = this.deserializeFromXmlFile(path);\n\t\t\t\tif (!plist)\n\t\t\t\t\tthrow Error(\"Could not read file '\" + path + \"'\");\n\t\t\t\tif (plist.length === 0)\n\t\t\t\t\tthrow Error(\"No macros were found in '\" + path + \"'\");\n\t\t\t\tif (plist.length > 1)\n\t\t\t\t\tthrow Error(\"Multiple macros were found in '\" + path + \"'\");\n\t\t\t\tvar group = plist[0];\n\n\t\t\t\tif (!group.Macros || group.Macros.count === 0)\n\t\t\t\t\tthrow Error(\"No macros were found in '\" + path + \"'\");\n\t\t\t\tif (group.Macros.length > 1)\n\t\t\t\t\tthrow Error(\"Multiple macros were found in '\" + path + \"'\");\n\t\t\t\treturn group.Macros[0];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns all the triggers in all the macros in the plist\n\t\t\t * @param {Plist} plist The plist object\n\t\t\t * @returns {Array} An arrray of object literals containing macroUUID, macroName, macroTriggers, and potentially groupUUID and groupName\n\t\t\t */\n\t\t\tgetMacroTriggers: function (plist) {\n\t\t\t\treturn _getMacroTriggers(plist);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Gets the type of the content contained in the plist.\n\t\t\t * @param {Plist} plist A plist object\n\t\t\t * @returns {string} \"group\", \"macro\", \"action\", \"empty\", or \"all\" which means it was probably loaded from the KM Macros Plist file.\n\t\t\t */\n\t\t\tgetPlistContentType: function (plist) {\n\t\t\t\treturn _getPlistContentType(plist);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Iterates through all the macros, even ones nested in groups, and calls the callback function.\n\t\t\t * @param {Plist} plist The plist object. Can be an array of groups, a single group, an array of macros, or a single macro,\n\t\t\t * @param {CallbackMacroGroup} callback Callback function to process each macro. If the callback returns false, the iteration is canceled.\n\t\t\t * @returns null if plist isn't iterable (i.e. it contains actions, false if the callback return false, otherwise true.\n\t\t\t */\n\t\t\titerateMacros: function (plist, callback) {\n\t\t\t\t_iterateMacros(plist, callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Reads the KM Macros Source file and returns the XML\n\t\t\t * @returns {string} The XML string\n\t\t\t */\n\t\t\treadKMAllMacrosSourceFileAsXml: function () {\n\t\t\t\tvar path = _getAppSupportFolderName() + \"/Keyboard Maestro/Keyboard Maestro Macros.plist\";\n\n\t\t\t\tvar nsError = $();\n\t\t\t\tvar fileData = $.NSData.dataWithContentsOfFileOptionsError(\n\t\t\t\t\t$(path).stringByStandardizingPath, 0, nsError);\n\t\t\t\tif (!fileData)\n\t\t\t\t\tthrow Error(_getErrorMessage(nsError, \"Could not read file '\" + path + \"'\"));\n\n\t\t\t\tnsError = $();\n\t\t\t\tvar plistData = $.NSPropertyListSerialization.propertyListWithDataOptionsFormatError(\n\t\t\t\t\tfileData, $.NSPropertyListImmutable, 0, nsError);\n\t\t\t\tif (!plistData)\n\t\t\t\t\tthrow Error(_getErrorMessage(nsError, \"Could not deserialize file '\" + path + \"'\"));\n\n\t\t\t\tnsError = $();\n\t\t\t\tvar xmlData = $.NSPropertyListSerialization.dataWithPropertyListFormatOptionsError(\n\t\t\t\t\tplistData, $.NSPropertyListXMLFormat_v1_0, 0, nsError);\n\t\t\t\tif (!xmlData)\n\t\t\t\t\tthrow Error(_getErrorMessage(nsError, \"Could not serialize file '\" + path + \"' to XML\"));\n\n\t\t\t\treturn $($.NSString.alloc.initWithDataEncoding(xmlData, $.NSUTF8StringEncoding)).js;\n\t\t\t},\n\n\t\t\treadTextFile: function (path) {\n\t\t\t\tvar error = $();\n\t\t\t\tvar str = ObjC.unwrap(\n\t\t\t\t\t$.NSString.stringWithContentsOfFileEncodingError(\n\t\t\t\t\t\t$(path).stringByStandardizingPath,\n\t\t\t\t\t\t$.NSUTF8StringEncoding,\n\t\t\t\t\t\terror\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tif (!str)\n\t\t\t\t\tthrow Error(_getErrorMessage(error, \"Could not read file '\" + path + \"', or file is empty\"));\n\t\t\t\treturn str;\n\t\t\t},\n\n\t\t\treOrderJsonProperties: function (json) {\n\t\t\t\treturn _reOrderJsonProperties(json);\n\t\t\t},\n\n\t\t\tserializeToJsonFile: function (obj, path) {\n\t\t\t\tvar str = this.serializeToJsonString(obj);\n\t\t\t\tthis.writeTextFile(str, path);\n\t\t\t},\n\n\t\t\tserializeToJsonString: function (obj) {\n\t\t\t\treturn JSON.stringify(obj, null, \"\\t\");\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Serializes a Plist object to XML and writes it to a text file\n\t\t\t * @param {Plist} plist The plist object to serialize\n\t\t\t * @param {string} path The path to the file to be written to\n\t\t\t */\n\t\t\tserializeToXmlFile: function (plist, path) {\n\t\t\t\tvar str = this.serializeToXmlString(plist);\n\t\t\t\tthis.writeTextFile(str, path);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Serializes a Plist object to an XML string\n\t\t\t * @param {Plist} plist \n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tserializeToXmlString: function (plist) {\n\t\t\t\tvar str = _serializeToXmlString(plist);\n\t\t\t\tstr = _cleanupXmlAfterDeserialization(str);\n\t\t\t\treturn _deTokenizeXmlDataNodes(str);\n\t\t\t},\n\n\t\t\tsetClipboardToKMPlistXml: function (xml) {\n\t\t\t\tvar objectType = _getKMPlistXmlObjectType(xml);\n\t\t\t\tvar clipboardStringType = _getKMClipboardStringTypeForObjectType(objectType);\n\t\t\t\t_setClipboardStringForType(xml, clipboardStringType);\n\t\t\t\treturn objectType;\n\t\t\t},\n\n\t\t\twriteTextFile: function (text, path) {\n\t\t\t\tvar error = $();\n\t\t\t\tvar str = $.NSString.alloc.initWithUTF8String(text);\n\t\t\t\tvar result = str.writeToFileAtomicallyEncodingError(\n\t\t\t\t\t$(path).stringByStandardizingPath,\n\t\t\t\t\ttrue,\n\t\t\t\t\t$.NSUTF8StringEncoding,\n\t\t\t\t\tnull);\n\t\t\t\tif (!result)\n\t\t\t\t\tthrow Error(_getErrorMessage(error, \"Could not write file '\" + path + \"'\"));\n\t\t\t}\n\t\t};\n\t})();\n\n\tvar KMEngine = (function () {\n\t\tvar _engineAppName = \"Keyboard Maestro Engine\";\n\t\tvar _engineApp;\n\t\tvar _currentApp = null;\n\n\t\tfunction _escapeXml(str) {\n\t\t\treturn str.replace(/[<>&'\"]/g, function (c) {\n\t\t\t\tswitch (c) {\n\t\t\t\t\tcase '<': return '&lt;';\n\t\t\t\t\tcase '>': return '&gt;';\n\t\t\t\t\tcase '&': return '&amp;';\n\t\t\t\t\tcase '\\'': return '&apos;';\n\t\t\t\t\tcase '\"': return '&quot;';\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfunction _getCurrentApp() {\n\t\t\tif (!_currentApp) {\n\t\t\t\t_currentApp = Application.currentApplication();\n\t\t\t\t_currentApp.includeStandardAdditions = true;\n\t\t\t}\n\t\t\treturn _currentApp;\n\t\t}\n\n\t\tfunction _getEngineApp() {\n\t\t\tif (!_engineApp)\n\t\t\t\t_engineApp = Application(_engineAppName);\n\t\t\treturn _engineApp;\n\t\t}\n\n\t\tfunction _getInstanceAttribute() {\n\t\t\treturn _getCurrentApp().systemAttribute(\"KMINSTANCE\");\n\t\t}\n\n\t\tfunction _isInstanceVariableName(name) {\n\t\t\treturn name.match(/^Instance|^Local/) != null\n\t\t}\n\n\t\tfunction _replaceAll(str, find, replace) {\n\t\t\treturn str.replace(new RegExp(_escapeXml(find), 'g'), replace);\n\t\t}\n\n\t\treturn {\n\t\t\tcalculate: function (str) {\n\t\t\t\treturn _getEngineApp().calculate(str);\n\t\t\t},\n\n\t\t\tdeleteVariable: function (name) {\n\t\t\t\tthis.setVariable(name, \"%Delete%\");\n\t\t\t},\n\n\t\t\tdoScript: function (uuidOrUniqueNameOrScript, parameter, timeout) {\n\t\t\t\tif (parameter) {\n\t\t\t\t\tif (timeout) {\n\t\t\t\t\t\t_getEngineApp().doScript(uuidOrUniqueNameOrScript, { withParameter: parameter }, { timeout: timeout });\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_getEngineApp().doScript(uuidOrUniqueNameOrScript, { withParameter: parameter });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (timeout) {\n\t\t\t\t\t\t_getEngineApp().doScript(uuidOrUniqueNameOrScript, { timeout: timeout });\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_getEngineApp().doScript(uuidOrUniqueNameOrScript);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\texecuting: function () {\n\t\t\t\treturn _getEngineApp().executing();\n\t\t\t},\n\n\t\t\tgetActionsClipboardType: function () {\n\t\t\t\treturn \"com.stairways.keyboardmaestro.actionarray\";\n\t\t\t},\n\n\t\t\tgetAllMacrosSourceFileName: function () {\n\t\t\t\treturn this.getAppSupportFolderName() + \"Keyboard Maestro Macros.plist\";\n\t\t\t},\n\n\t\t\tgetAllVariableNames: function () {\n\t\t\t\treturn _getEngineApp().variables.name();\n\t\t\t},\n\n\t\t\tgetAppSupportFolderName: function () {\n\t\t\t\tvar app = _getCurrentApp();\n\t\t\t\treturn app.pathTo('application support', { from: 'user domain' }) + \"/Keyboard Maestro/\";\n\t\t\t},\n\n\t\t\tgetCurrentApp: function () {\n\t\t\t\treturn _getCurrentApp();\n\t\t\t},\n\n\t\t\tgetEngineApp: function () {\n\t\t\t\treturn _getEngineApp();\n\t\t\t},\n\n\t\t\tgetHotKeys: function (asString, getAll) {\n\t\t\t\treturn _getEngineApp().gethotkeys({ asstring: !!asString, getall: !!getAll });\n\t\t\t},\n\n\t\t\tgetHotKeysAsPlist: function (getAll) {\n\t\t\t\treturn this.convertStringToPlist(this.getHotKeys(true, getAll));\n\t\t\t},\n\n\t\t\tgetMacrosClipboardType: function () {\n\t\t\t\treturn \"com.stairways.keyboardmaestro.macrosarray\";\n\t\t\t},\n\n\t\t\tgetMacros: function () {\n\t\t\t\treturn _getEngineApp().getmacros({ asstring: true });\n\t\t\t},\n\n\t\t\tgetNamedClipboardInfo: function () {\n\t\t\t\tvar path = this.getNamedClipboardsSourceFileName();\n\t\t\t\tvar plist = this.readPlistBinaryFile(path);\n\n\t\t\t\tvar result = plist.map(function (item) {\n\t\t\t\t\treturn { name: item.Name, UID: item.UID };\n\t\t\t\t});\n\t\t\t\tresult = result.sort(function (a, b) {\n\t\t\t\t\tif (a.name < b.name) return -1;\n\t\t\t\t\tif (a.name > b.name) return 1;\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tgetNamedClipboardsSourceFileName: function () {\n\t\t\t\treturn this.getAppSupportFolderName() +\n\t\t\t\t\t\"Keyboard Maestro Clipboards.plist\";\n\t\t\t},\n\n\t\t\tgetRandomUUID: function() {\n\t\t\t\treturn this.processTokens(\"%RandomUUID%\");\n\t\t\t},\n\n\t\t\tgetVariable: function (name, required) {\n\t\t\t\tvar result = undefined;\n\t\t\t\tif (inDesignMode && designModeParams)\n\t\t\t\t\tresult = designModeParams[name];\n\t\t\t\tif (result === undefined) {\n\t\t\t\t\tif (_isInstanceVariableName(name))\n\t\t\t\t\t\tresult = _getEngineApp().getvariable(name, { instance: _getInstanceAttribute() });\n\t\t\t\t\telse\n\t\t\t\t\t\tresult = _getEngineApp().getvariable(name);\n\t\t\t\t\tif (!result && required)\n\t\t\t\t\t\tthrow Error(\"Variable '\" + name + \"' is empty\");\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\thttpGet: function (url) {\n\t\t\t\tvar script =\n\t\t\t\t\t'<dict> \\n' +\n\t\t\t\t\t'\t<key>DisplayKind</key> \\n' +\n\t\t\t\t\t'\t<string>Variable</string> \\n' +\n\t\t\t\t\t'\t<key>MacroActionType</key> \\n' +\n\t\t\t\t\t'\t<string>GetURL</string> \\n' +\n\t\t\t\t\t'\t<key>TimeOutAbortsMacro</key> \\n' +\n\t\t\t\t\t'\t<true/> \\n' +\n\t\t\t\t\t'\t<key>TrimResults</key> \\n' +\n\t\t\t\t\t'\t<true/> \\n' +\n\t\t\t\t\t'\t<key>URL</key> \\n' +\n\t\t\t\t\t'\t<string>##URL##</string> \\n' +\n\t\t\t\t\t'\t<key>Variable</key> \\n' +\n\t\t\t\t\t'\t<string>geturl_Result</string> \\n' +\n\t\t\t\t\t'</dict>';\n\t\t\t\tscript = script.replace(\"##URL##\", _escapeXml(url));\n\t\t\t\tthis.doScript(script);\n\t\t\t\tvar result = this.getVariable(\"geturl_Result\");\n\t\t\t\tthis.deleteVariable(\"geturl_Result\");\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\tplaySound: function (file, soundEffect, volume) {\n\t\t\t\tvar options = {};\n\t\t\t\tif (soundEffect !== undefined)\n\t\t\t\t\toptions.soundeffect = soundEffect;\n\t\t\t\tif (volume !== undefined)\n\t\t\t\t\toptions.volume = volume;\n\t\t\t\t_getEngineApp().playSound(file, options);\n\t\t\t},\n\n\t\t\tprocessTokens: function (str) {\n\t\t\t\treturn _getEngineApp().processTokens(str);\n\t\t\t},\n\n\t\t\treload: function () {\n\t\t\t\t_getEngineApp().reload();\n\t\t\t},\n\n\t\t\tsetVariable: function (name, value) {\n\t\t\t\tif (_isInstanceVariableName(name))\n\t\t\t\t\t_getEngineApp().setvariable(name, { to: value, instance: _getInstanceAttribute() });\n\t\t\t\telse\n\t\t\t\t\t_getEngineApp().setvariable(name, { to: value });\n\t\t\t},\n\n\t\t\t// You should pass values for \"title\" and \"message\". The rest have default values.\n\t\t\tshowOkCancelMessagePrompt: function (title, message, okButtonText, cancelButtonText, resultVariableName) {\n\t\t\t\ttitle = title || \"\";\n\t\t\t\tmessage = message || \"\";\n\t\t\t\tokButtonText = okButtonText || \"OK\";\n\t\t\t\tcancelButtonText = cancelButtonText || \"Cancel\";\n\t\t\t\tresultVariableName = resultVariableName || \"showOkCancelMessagePromptResult\";\n\t\t\t\tvar script =\n\t\t\t\t\t'<dict> \\n' +\n\t\t\t\t\t'\t<key>Actions</key> \\n' +\n\t\t\t\t\t'\t<array> \\n' +\n\t\t\t\t\t'\t\t<dict> \\n' +\n\t\t\t\t\t'\t\t\t<key>MacroActionType</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>SetVariableToText</string> \\n' +\n\t\t\t\t\t'\t\t\t<key>Text</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>##cancelButtonText##</string> \\n' +\n\t\t\t\t\t'\t\t\t<key>Variable</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>##resultVariableName##</string> \\n' +\n\t\t\t\t\t'\t\t</dict> \\n' +\n\t\t\t\t\t'\t\t<dict> \\n' +\n\t\t\t\t\t'\t\t\t<key>Buttons</key> \\n' +\n\t\t\t\t\t'\t\t\t<array> \\n' +\n\t\t\t\t\t'\t\t\t\t<dict> \\n' +\n\t\t\t\t\t'\t\t\t\t\t<key>Button</key> \\n' +\n\t\t\t\t\t'\t\t\t\t\t<string>##okButtonText##</string> \\n' +\n\t\t\t\t\t'\t\t\t\t\t<key>Cancel</key> \\n' +\n\t\t\t\t\t'\t\t\t\t\t<false/> \\n' +\n\t\t\t\t\t'\t\t\t\t</dict> \\n' +\n\t\t\t\t\t'\t\t\t\t<dict> \\n' +\n\t\t\t\t\t'\t\t\t\t\t<key>Button</key> \\n' +\n\t\t\t\t\t'\t\t\t\t\t<string>##cancelButtonText##</string> \\n' +\n\t\t\t\t\t'\t\t\t\t\t<key>Cancel</key> \\n' +\n\t\t\t\t\t'\t\t\t\t\t<true/> \\n' +\n\t\t\t\t\t'\t\t\t\t</dict> \\n' +\n\t\t\t\t\t'\t\t\t</array> \\n' +\n\t\t\t\t\t'\t\t\t<key>MacroActionType</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>PromptForUserInput</string> \\n' +\n\t\t\t\t\t'\t\t\t<key>Prompt</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>##message##</string> \\n' +\n\t\t\t\t\t'\t\t\t<key>TimeOutAbortsMacro</key> \\n' +\n\t\t\t\t\t'\t\t\t<true/> \\n' +\n\t\t\t\t\t'\t\t\t<key>Title</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>##title##</string> \\n' +\n\t\t\t\t\t'\t\t\t<key>Variables</key> \\n' +\n\t\t\t\t\t'\t\t\t<array/> \\n' +\n\t\t\t\t\t'\t\t</dict> \\n' +\n\t\t\t\t\t'\t\t<dict> \\n' +\n\t\t\t\t\t'\t\t\t<key>MacroActionType</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>SetVariableToText</string> \\n' +\n\t\t\t\t\t'\t\t\t<key>Text</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>%Variable%Result Button%</string> \\n' +\n\t\t\t\t\t'\t\t\t<key>Variable</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>##resultVariableName##</string> \\n' +\n\t\t\t\t\t'\t\t</dict> \\n' +\n\t\t\t\t\t'\t</array> \\n' +\n\t\t\t\t\t'\t<key>MacroActionType</key> \\n' +\n\t\t\t\t\t'\t<string>Group</string> \\n' +\n\t\t\t\t\t'\t<key>TimeOutAbortsMacro</key> \\n' +\n\t\t\t\t\t'\t<true/> \\n' +\n\t\t\t\t\t'</dict>';\n\t\t\t\tscript = _replaceAll(script, \"##title##\", _escapeXml(title));\n\t\t\t\tscript = _replaceAll(script, \"##message##\", _escapeXml(message));\n\t\t\t\tscript = _replaceAll(script, \"##okButtonText##\", _escapeXml(okButtonText));\n\t\t\t\tscript = _replaceAll(script, \"##cancelButtonText##\", _escapeXml(cancelButtonText));\n\t\t\t\tscript = _replaceAll(script, \"##resultVariableName##\", _escapeXml(resultVariableName));\n\t\t\t\tthis.doScript(script);\n\t\t\t\tvar result = this.getVariable(resultVariableName);\n\t\t\t\tthis.deleteVariable(resultVariableName);\n\t\t\t\treturn result;\n\t\t\t},\n\n\t\t\t// You should pass values for \"title\" and \"message\". The rest have default values.\n\t\t\tshowOkMessagePrompt: function (title, message, okButtonText) {\n\t\t\t\ttitle = title || \"\";\n\t\t\t\tmessage = message || \"\";\n\t\t\t\tokButtonText = okButtonText || \"OK\";\n\t\t\t\tvar script =\n\t\t\t\t\t'<dict> \\n' +\n\t\t\t\t\t'\t<key>Buttons</key> \\n' +\n\t\t\t\t\t'\t<array> \\n' +\n\t\t\t\t\t'\t\t<dict> \\n' +\n\t\t\t\t\t'\t\t\t<key>Button</key> \\n' +\n\t\t\t\t\t'\t\t\t<string>##okButtonText##</string> \\n' +\n\t\t\t\t\t'\t\t</dict> \\n' +\n\t\t\t\t\t'\t</array> \\n' +\n\t\t\t\t\t'\t<key>MacroActionType</key> \\n' +\n\t\t\t\t\t'\t<string>PromptForUserInput</string> \\n' +\n\t\t\t\t\t'\t<key>Prompt</key> \\n' +\n\t\t\t\t\t'\t<string>##message##</string> \\n' +\n\t\t\t\t\t'\t<key>TimeOutAbortsMacro</key> \\n' +\n\t\t\t\t\t'\t<true/> \\n' +\n\t\t\t\t\t'\t<key>Title</key> \\n' +\n\t\t\t\t\t'\t<string>##title##</string> \\n' +\n\t\t\t\t\t'\t<key>Variables</key> \\n' +\n\t\t\t\t\t'\t<array/> \\n' +\n\t\t\t\t\t'</dict>';\n\t\t\t\tscript = script\n\t\t\t\t\t.replace(\"##title##\", _escapeXml(title))\n\t\t\t\t\t.replace(\"##message##\", _escapeXml(message))\n\t\t\t\t\t.replace(\"##okButtonText##\", _escapeXml(okButtonText));\n\t\t\t\tthis.doScript(script);\n\t\t\t}\n\t\t};\n\t})();\n\n\tvar KMEditor = (function() {\n\t\tvar _editorAppName = \"Keyboard Maestro\";\n\t\tvar _editorApp;\n\n\t\treturn {\n\t\t\tgetEditorApp: function() {\n\t\t\t\treturn _editorApp ? _editorApp : _editorApp = Application(_editorAppName);\n\t\t\t},\n\n\t\t\tgetEditorAppName: function() {return _editorAppName;},\n\n\t\t\timportMacros: function(pathOrPlist) {\n\t\t\t\tthis.getEditorApp().importmacros(pathOrPlist);\n\t\t\t},\n\t\t};\n\t})();\n\n\tvar _allMacrosPlist = null;\n\tfunction getAllMacrosPlist() {\n\t\tif (_allMacrosPlist == null)\n\t\t\t_allMacrosPlist = PlistUtils.deserializeKMAllMacrosSourceFile();\n\t\treturn _allMacrosPlist;\n\t}\n\n\tvar _globalMacroGroup = undefined;\n\tfunction getGlobalMacroGroup() {\n\t\tif (_globalMacroGroup !== undefined)\n\t\t\treturn _globalMacroGroup;\n\n\t\tvar plist = getAllMacrosPlist();\n\t\tfor (let i = 0; i < plist.MacroGroups.length; i++) {\n\t\t\tconst group = plist.MacroGroups[i];\n\t\t\tif (group.Name === \"Global Macro Group\") {\n\t\t\t\t_globalMacroGroup = group;\n\t\t\t\treturn group;\n\t\t\t}\n\t\t}\n\t\t_globalMacroGroup = null;\n\t\treturn null;\n\t}\n\n\tfunction createEmptyGlobalMacroGroup() {\n\t\tvar emptyMacrosString =\n\t\t\t'<?xml version=\"1.0\" encoding=\"UTF-8\"?> \\n' +\n\t\t\t'<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"> \\n' +\n\t\t\t'<plist version=\"1.0\"> \\n' +\n\t\t\t'<array> \\n' +\n\t\t\t'\t<dict> \\n' +\n\t\t\t'\t\t<key>Activate</key> \\n' +\n\t\t\t'\t\t<string>Normal</string> \\n' +\n\t\t\t'\t\t<key>CreationDate</key> \\n' +\n\t\t\t'\t\t<real>476327082.54374099</real> \\n' +\n\t\t\t'\t\t<key>Macros</key> \\n' +\n\t\t\t'\t\t<array> \\n' +\n\t\t\t'\t\t</array> \\n' +\n\t\t\t'\t\t<key>Name</key> \\n' +\n\t\t\t'\t\t<string>Global Macro Group</string> \\n' +\n\t\t\t'\t\t<key>ToggleMacroUID</key> \\n' +\n\t\t\t'\t\t<string>F27B683F-D94D-4A80-A804-BB520C5BD73A</string> \\n' +\n\t\t\t'\t\t<key>UID</key> \\n' +\n\t\t\t'\t\t<string>DA8512F7-F323-46B1-8319-752E0495CFD0</string> \\n' +\n\t\t\t'\t</dict> \\n' +\n\t\t\t'</array> \\n' +\n\t\t\t'</plist>';\n\n\t\tvar globalMacroGroup = getGlobalMacroGroup();\n\t\tif (globalMacroGroup)\n\t\t\temptyMacrosString = emptyMacrosString.replace(\"DA8512F7-F323-46B1-8319-752E0495CFD0\", globalMacroGroup.UID);\n\n\t\tvar plist = PlistUtils.deserializeFromXmlString(emptyMacrosString);\n\t\treturn plist[0];\n\t}\n\n\tfunction getQuickMacros() {\n\t\tvar path = KMEngine.getVariable(\"Local_QuickMacrosFilePath\");\n\t\tif (!path)\n\t\t\tpath = KMEngine.getAppSupportFolderName() + \"Quick Macros.plist\";\n\t\tif (!FileUtils.fileExists(path))\n\t\t\tthrow Error(\"QuickMacro file doesn't exist: '\" + path + \"'\");\n\n\t\tvar plist = PlistUtils.deserializeFromXmlFile(path);\n\t\tif (Object.keys(plist).length === 0)\n\t\t\tthrow new Error(\"There are apparently no Quick Macros found in Quick Macros.plist\");\n\t\treturn plist;\n\t}\n\n\tfunction getSourceQuickMacro(quickMacros) {\n\t\tvar uuids = Object.keys(quickMacros);\n\t\tif (uuids.length === 1)\n\t\t\treturn quickMacros[uuids[0]];\n\n\t\tvar uuid = KMEngine.getVariable(\"Local_UUID\");\n\t\tif (uuid) {\n\t\t\tlet result = quickMacros[uuid];\n\t\t\tif (result)\n\t\t\t\treturn result;\n\t\t\tlet error = new Error(`Could not find a Quick Macro for UUID \"${uuid}\"`);\n\t\t\terror.myErrorCode = \"not found\";\n\t\t\tthrow error;\n\t\t}\n\n\t\tvar allMacrosPlist = getAllMacrosPlist();\n\t\tvar filteredUUIDs = uuids.filter(uuid => PlistUtils.findMacro(allMacrosPlist, uuid) == null);\n\t\tif (filteredUUIDs.length === 1)\n\t\t\treturn quickMacros[filteredUUIDs[0]];\n\n\t\tlet error = new Error(`Multiple Quick Macros exist. You'll need to choose one.`);\n\t\terror.myErrorCode = \"multiple\";\n\t\tthrow error;\n\t}\n\n\tfunction makeUniqueMacroName(macroName) {\n\t\tvar globalMacroGroup = getGlobalMacroGroup();\n\t\tif (!globalMacroGroup)\n\t\t\treturn macroName;\n\n\t\tvar highestDupNumber = -1;\n\t\tfor (let i = 0; i < globalMacroGroup.Macros.length; i++) {\n\t\t\tconst macro = globalMacroGroup.Macros[i];\n\t\t\tvar matches = macro.Name.match(/^Quick Macro - Imported( \\((\\d+)\\)$|$)/);\n\t\t\tif (matches) {\n\t\t\t\tif (matches && matches.length !== 3)\n\t\t\t\t\tthrow new Error(`Unexpected regex match array ${matches}`)\n\t\t\t\tvar dupNumber = matches[2] || 0;\n\t\t\t\thighestDupNumber = Math.max(highestDupNumber, dupNumber);\n\t\t\t}\n\t\t}\n\n\t\tif (highestDupNumber < 0)\n\t\t\treturn macroName;\n\t\treturn `${macroName} (${highestDupNumber + 1})`;\n\t}\n\n\tfunction importQuickMacro(quickMacros) {\n\t\tvar quickMacro = getSourceQuickMacro(quickMacros);\n\t\tif (!quickMacro)\n\t\t\tthrow new Error(`Could not determine which Recorded Actions Set to import`);\n\n\t\tvar macroName = makeUniqueMacroName(\"Quick Macro - Imported\");\n\t\tvar macro = PlistUtils.createEmptyMacro(macroName);\n\t\tmacro.UID = KMEngine.getRandomUUID();\n\t\tmacro.Actions = quickMacro;\n\t\tmacro.Triggers = [];\n\t\tif (macro.Actions.length > 0) {\n\t\t\tif(macro.Actions[0].MacroActionType === \"Semaphore\")\n\t\t\t\tmacro.Actions.splice(0, 1);\n\t\t}\n\n\t\tvar group = createEmptyGlobalMacroGroup();\n\t\tgroup.Macros.push(macro);\n\t\tvar str = PlistUtils.serializeToXmlString([group]);\n\n\t\tif (!inDesignMode || KMEngine.getVariable(\"debug_DontImport\") !== \"1\")\n\t\t\tKMEditor.importMacros(str);\n\t\treturn \"OK\";\n\t}\n\n\tfunction getUUIDs(quickMacros) {\n\t\tvar uuids = Object.keys(quickMacros).sort();\n\t\tvar currUUID = KMEngine.getVariable(\"DND__ImportQuickMacroUUID\");\n\n\t\tvar result = [];\n\t\tfor (let i = 0; i < uuids.length; i++) {\n\t\t\tconst uuid = uuids[i];\n\t\t\tresult.push(`${uuid}__${uuid === currUUID ? \"✓\" : \"\"}Quick Macro${i + 1}`);\n\t\t}\n\n\t\treturn result.join(\"\\n\");\n\t}\n\n\tfunction execute() {\n\t\tif (inDesignMode)\n\t\t\tKMEditor.getEditorApp().activate();\n\t\tvar quickMacros = getQuickMacros();\n\n\t\tvar action = KMEngine.getVariable(\"Local_Action\", true);\n\t\tswitch (action) {\n\t\t\tcase \"getUUIDs\":\n\t\t\t\treturn getUUIDs(quickMacros);\n\t\t\tcase \"import\":\n\t\t\t\treturn importQuickMacro(quickMacros);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid Local_Action: \"${action}\"`);\n\t\t}\n\t}\n\n\t// #region ======== Runner Code =============================\n\n\tfunction getErrorResult(e) {\n\t\tif (e.myErrorCode) {\n\t\t\tlet result = {\n\t\t\t\tErrorCode: e.myErrorCode,\n\t\t\t\tErrorMessage: e.message\n\t\t\t};\n\t\t\treturn JSON.stringify(result, null, 2);\n\t\t}\n\n\t\tif (inDesignMode)\n\t\t\treturn `Error on line: ${e.line}: ${e.message}`;\n\t\treturn `Error: ${e.message}`;\n\t}\n\n\tif (inDesignMode) {\n\t\ttry {\n\t\t\treturn execute();\n\t\t} catch (e) {\n\t\t\treturn getErrorResult(e);\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tif (_editorAppName && Application(_editorAppName).isRunning) {\n\t\t\t\t\tApplication(_editorAppName).activate();\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"Error in try..finally: \" + e);\n\t\t\t}\n\t\t}\n\t} else {\n\t\ttry {\n\t\t\treturn execute();\n\t\t} catch (e) {\n\t\t\treturn getErrorResult(e);\n\t\t}\n\t}\n\t// #endregion\n\n})(false);",
			"NotifyOnFailure": false
		},
		{
			"MacroActionType": "IfThenElse",
			"ActionName": "Abort if 'Local_Result' is '^Error:'",
			"ActionUID": 231395,
			"IsDisclosed": false,
			"ActionColor": "Yellow",
			"ElseActions": [],
			"TimeOutAbortsMacro": true,
			"Conditions": {
				"ConditionListMatch": "All",
				"ConditionList": [
					{
						"ConditionType": "Variable",
						"VariableValue": "^Error:",
						"Variable": "Local_Result",
						"VariableConditionType": "Matches"
					}
				]
			},
			"ElseActionListDisclosed": false,
			"ThenActions": [
				{
					"MacroActionType": "PromptForUserInput",
					"Title": "%ExecutingMacro%",
					"ActionName": "Prompt error with cancel: 'An error has occurred'",
					"Prompt": "Macro \"%ExecutingThisMacro%\" has encountered an error: %Variable%Local_Result%",
					"ActionUID": 231396,
					"IsDisclosed": false,
					"TimeOutAbortsMacro": true,
					"Buttons": [
						{
							"Button": "OK",
							"Cancel": true
						}
					],
					"Variables": []
				}
			]
		},
		{
			"MacroActionType": "Return",
			"IsDisclosed": false,
			"Text": "%Variable%Local_Result%",
			"ActionUID": 231419
		}
	]
}