<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Actions</key>
		<array>
			<dict>
				<key>ActionColor</key>
				<string>Orange</string>
				<key>ActionName</key>
				<string>Custom Floating HTML Prompt: Progress Bar</string>
				<key>ActionUID</key>
				<integer>9466464</integer>
				<key>Asynchronously</key>
				<true/>
				<key>Floating</key>
				<true/>
				<key>IsDisclosed</key>
				<false/>
				<key>MacroActionType</key>
				<string>CustomPrompt</string>
				<key>Text</key>
				<string>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;Macro Reporter Progress&lt;/title&gt;
	&lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
	&lt;style type="text/css"&gt;
html{height:100%}body{overflow:hidden;margin:0;background: linear-gradient(#666666, #bbbbbb);text-align:center;font:1.0em "Lucida Grande",serif;color:yellow;padding:10px;line-height:50%;}progress:not([value]){color:red}
	&lt;/style&gt;
&lt;/head&gt;
&lt;body data-kmwindow="SCREENVISIBLE(Main,MidX)-150,SCREEN(Main,Top,20%),300,100" data-kmwindowid="Progress Bar Window"&gt;
	&lt;p&gt;Working. Please Wait...&lt;/p&gt;
	&lt;progress max="10"&gt;&lt;/progress&gt;
&lt;/body&gt;
&lt;/html&gt;</string>
				<key>TimeOutAbortsMacro</key>
				<true/>
				<key>UseText</key>
				<true/>
			</dict>
			<dict>
				<key>ActionColor</key>
				<string>Purple</string>
				<key>ActionName</key>
				<string>Execute JavaScript For Automation: Create JSON Macro List, Group List</string>
				<key>ActionUID</key>
				<integer>9466465</integer>
				<key>DisplayKind</key>
				<string>AppendVar</string>
				<key>HonourFailureSettings</key>
				<true/>
				<key>IncludeStdErr</key>
				<false/>
				<key>IncludedVariables</key>
				<array>
					<string>9999</string>
				</array>
				<key>IsDisclosed</key>
				<false/>
				<key>MacroActionType</key>
				<string>ExecuteJavaScriptForAutomation</string>
				<key>Path</key>
				<string></string>
				<key>Text</key>
				<string>(() =&gt; {
	"use strict";
	ObjC.import('AppKit');

	function deserializeFromXmlString(xml) {
		var nsError = $();
		var result = ObjC.deepUnwrap(
			$.NSPropertyListSerialization.propertyListWithDataOptionsFormatError(
				$(xml).dataUsingEncoding($.NSUTF8StringEncoding), 0, 0, nsError))
		if (!result)
			throw Error(_getErrorMessage(nsError, "Could not convert string to plist"));
		return result;
	}

	function convertXmlStringToJsonString(xml) {
		var plist = deserializeFromXmlString(xml);
		return JSON.stringify(plist, null, null);
	}

	var app = Application.currentApplication()
	app.includeStandardAdditions = true

	var kmInst = app.systemAttribute("KMINSTANCE")
	var kme = Application("Keyboard Maestro Engine")
	
	var _macros = kme.getmacros({
		asstring: true
	});
	var _json = convertXmlStringToJsonString(_macros)

	var activeGroups = '&lt;option&gt;Select a Macro Group&lt;/option&gt;\n&lt;option disabled&gt;–––&lt;/option&gt;\n&lt;optgroup label="Active Groups"&gt;\n';
	var inactiveGroups = '&lt;optgroup label="Inactive Groups"&gt;\n';
	var data = JSON.parse(_json);
	data.forEach((group) =&gt; {
		if (group.enabled) {
			activeGroups += '&lt;option value="' + group.name + '"&gt;' + group.name + '&lt;/option&gt;\n';
		} else {
			inactiveGroups += '&lt;option value="' + group.name + '"&gt;' + group.name + '&lt;/option&gt;\n';
		}
	});
	activeGroups += '&lt;/optgroup&gt;\n';
	inactiveGroups += '&lt;/optgroup&gt;\n';
	var opts = activeGroups += inactiveGroups;	

	kme.setvariable("localGroupSelect", {instance: kmInst, to: opts})

	return _json;
})();
</string>
				<key>TimeOutAbortsMacro</key>
				<true/>
				<key>TrimResults</key>
				<true/>
				<key>TrimResultsNew</key>
				<true/>
				<key>UseModernSyntax</key>
				<false/>
				<key>UseText</key>
				<true/>
				<key>Variable</key>
				<string>localMacroList</string>
			</dict>
			<dict>
				<key>ActionColor</key>
				<string>Teal</string>
				<key>ActionUID</key>
				<integer>9466466</integer>
				<key>IsDisclosed</key>
				<false/>
				<key>MacroActionType</key>
				<string>SetVariableToText</string>
				<key>Text</key>
				<string></string>
				<key>Variable</key>
				<string>HTML Result Button</string>
			</dict>
			<dict>
				<key>ActionColor</key>
				<string>Orange</string>
				<key>ActionName</key>
				<string>Close "Working" dialog</string>
				<key>ActionUID</key>
				<integer>9466467</integer>
				<key>DisplayKind</key>
				<string>None</string>
				<key>IsDisclosed</key>
				<false/>
				<key>MacroActionType</key>
				<string>ExecuteJavaScriptForCustomPrompt</string>
				<key>NotifyOnFailure</key>
				<false/>
				<key>Path</key>
				<string></string>
				<key>StopOnFailure</key>
				<false/>
				<key>Text</key>
				<string>window.close();</string>
				<key>TimeOutAbortsMacro</key>
				<false/>
				<key>TimeOutPeriod</key>
				<real>0.5</real>
				<key>UseText</key>
				<true/>
				<key>WindowID</key>
				<string>Progress Bar Window</string>
			</dict>
			<dict>
				<key>ActionColor</key>
				<string>Teal</string>
				<key>ActionName</key>
				<string>While Conditions Met Execute Actions: Display Control Panel</string>
				<key>ActionUID</key>
				<integer>9466468</integer>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionColor</key>
						<string>Orange</string>
						<key>ActionName</key>
						<string>Custom Floating HTML Prompt: Macro Reporter</string>
						<key>ActionUID</key>
						<integer>9466469</integer>
						<key>Floating</key>
						<true/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>CustomPrompt</string>
						<key>Resizable</key>
						<true/>
						<key>Text</key>
						<string>&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
	&lt;meta charset="utf-8" /&gt;
	&lt;title&gt;GROUP &amp; MACRO STATUS, COUNTS, NAMES, TRIGGERS&lt;/title&gt;
	&lt;style type="text/css"&gt;
html{height:100%}body{background: linear-gradient(#666666, #bbbbbb)fixed;font:.80em "Lucida Grande",serif;margin:0}#title{border-bottom:2px solid yellow;background-color:#505050;color:white;font-size:1.0em;width:240px;padding:6px 0 10px 12px;margin:0 0 12px 12px;text-transform:uppercase;letter-spacing:8px;font-weight:bold;border-radius:0 0 9px 9px}form{margin:6px 12px;text-align:left}select{border:0;font:1.1em Menlo,monospace,monospace;border-radius:3px;padding:3px 6px 0 6px;float:left;margin-bottom:10px; width:85%}.button{background-color:#bbbbbb;border:0;color:black;padding:6px 6px;text-align:center;text-decoration:none;display:inline-block;font-size:.9em;font-weight:bold;margin:0 5px;cursor:pointer;border-radius:6px;width:60px}#controls{float:right;margin:0 -2px 8px}#report{background: linear-gradient(#bbbbbb,#666666);margin:12px;overflow-y:scroll;height:250px;border: 2px dotted yellow}div.ver{position:absolute;top:6px;right:12px;font-size:0.8em;}ga{color:#bbbbbb;}td{vertical-align:top}a{color:white;text-decoration:none}a:hover{color:yellow}
	&lt;/style&gt;
	&lt;script&gt;
function reportMacros(groupName) {
	"use strict";

	const	groups = JSON.parse(document.kmvar.localMacroList),
			groupsIndex = groups.findIndex(
				group =&gt; groupName.value === group.name
			);

	const	group = groups[groupsIndex],
			gEnabled = group.enabled,
			count = group.macros.length -1,
			gMacros = group.macros,
				gListing = gMacros.map(macro =&gt; {
				const
					mName = macro.name,
					mStatus = macro.enabled,
					mUsed = macro.used,
					mUID = macro.uid,
					mSaved = macro.saved,
					mTrigger = macro.triggers.map(function(trigger) {
						return trigger.short;
					}).join(" or ");
				var nbr = mUsed.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
				var h = Math.floor(mSaved / 60 / 60);
				var m = Math.floor(mSaved / 60) - (h * 60);
				var mTime = h.toString().padStart(2, '0') + ':' + m.toString().padStart(2, '0');
				var mark;
				(mStatus) ? mark = "☑️" : mark = "⬜️";
				var nm = mName.replace('&lt;','&amp;lt;');
				nm.replace('&gt;','&amp;gt;');

				const regex = /[A-Z] [A-Z] [A-Z]|──|---| —|——/g;
				if (!mName.match(regex) &amp;&amp; !mName.includes('Macro Group')) {
					return `&lt;tr&gt;\n&lt;td bgcolor="lightgray" align="right"&gt;${nbr}&lt;/td&gt;\n&lt;td bgcolor="gray" style="color:white" width="5%" align="right"&gt;${mark}&lt;/td&gt;&lt;td bgcolor="gray" style="color:white"&gt;&lt;a href="kmtrigger://macro=${mUID}"&gt;${nm}&lt;/a&gt;&lt;/td&gt;\n&lt;td bgcolor="lightgray" style="color:gray"&gt;${mTrigger}&lt;/td&gt;&lt;td align="right"&gt;${mTime}&lt;/td&gt;\n&lt;/tr&gt;`;
				} else {
					if (mName.includes('Macro Group')) {
						var gn = mName.replace(' \[Macro Group\]','');
						return `&lt;tr bgcolor="#505050"&gt;\n&lt;td style="color:white" align="right"&gt;&lt;/td&gt;\n&lt;td bgcolor="#505050" style="color:white" colspan="4"&gt;The &lt;b style="color:yellow"&gt;${gn}&lt;/b&gt; palette includes &lt;span title="Including macros used as titles, spacers" style="cursor:pointer;"&gt;${count} macros&lt;/span&gt;&lt;/td&gt;\n&lt;/tr&gt;\n`;
					}
				}	// name handling
			}).join("\n");	// glisting

				// build table
			var gmark;
			(gEnabled) ? gmark = "☑️" : gmark = "⬜️";
			document.getElementById('report').innerHTML = `&lt;table width="100%" cellspacing="0" cellpadding="6"&gt;\n&lt;tr&gt;\n&lt;td bgcolor="#505050" style="color:white" align="right" width="5%"&gt;${gmark}&lt;/td&gt;\n&lt;td bgcolor="#505050" style="color:white" colspan="2"&gt;${groupName.value}&lt;/span&gt;&lt;/td &gt;&lt;td bgcolor="#505050" style="color:darkgray" width="20%"&gt;Hot Key&lt;/td&gt;&lt;td bgcolor="#505050" style="color:darkgray" align="right"&gt;hh:mm&lt;/td&gt;\n&lt;/tr&gt;\n${gListing}&lt;/table&gt;\n`;
}
	&lt;/script&gt;
&lt;/head&gt;
&lt;body data-kmwindowid="macroReporter" data-kmwindow="SCREEN(Main,Left,35%),SCREEN(Main,Top,17%),526,354"&gt;
&lt;div id="title"&gt;Macro Reporter&lt;/div&gt;
&lt;div class="ver"&gt;&lt;ga&gt;Version 3.0d&lt;/ga&gt;&lt;/div&gt;
&lt;form action="#" method="post"&gt;
	&lt;select id="group" name="localGroupName" data-kmignoreinit="1" size="1" onchange="reportMacros(localGroupName)" autofocus&gt;
		&lt;script&gt;
		document.write(window.KeyboardMaestro.GetVariable('localGroupSelect'));
		&lt;/script&gt;
	&lt;/select&gt;
	&lt;div id="controls"&gt;
		&lt;button class="button" type="button" onclick="window.KeyboardMaestro.Cancel('Cancel')"&gt;Quit&lt;/button&gt;
	&lt;/div&gt;
&lt;/form&gt;
&lt;br clear="all"&gt;
&lt;div id="report"&gt;
	&lt;p style="margin-top:105px;text-align:center"&gt;Use the popup menu to select a Macro Group.&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>UseText</key>
						<true/>
					</dict>
				</array>
				<key>Conditions</key>
				<dict>
					<key>ConditionList</key>
					<array>
						<dict>
							<key>ConditionType</key>
							<string>Variable</string>
							<key>Variable</key>
							<string>HTML Result Button</string>
							<key>VariableConditionType</key>
							<string>IsNot</string>
							<key>VariableValue</key>
							<string>Cancel</string>
						</dict>
					</array>
					<key>ConditionListMatch</key>
					<string>All</string>
				</dict>
				<key>MacroActionType</key>
				<string>While</string>
				<key>TimeOutAbortsMacro</key>
				<true/>
			</dict>
		</array>
		<key>CreationDate</key>
		<real>673804869.83080101</real>
		<key>ModificationDate</key>
		<real>759491614.94804299</real>
		<key>Name</key>
		<string>Macro Reporter 3.0d</string>
		<key>Triggers</key>
		<array>
			<dict>
				<key>FireType</key>
				<string>Pressed</string>
				<key>KeyCode</key>
				<integer>11</integer>
				<key>MacroTriggerType</key>
				<string>HotKey</string>
				<key>Modifiers</key>
				<integer>4608</integer>
			</dict>
			<dict>
				<key>MacroTriggerType</key>
				<string>StatusMenu</string>
			</dict>
		</array>
		<key>UID</key>
		<string>FD219252-14E7-4BB5-BFF8-36C24C3B3321</string>
	</dict>
</array>
</plist>
