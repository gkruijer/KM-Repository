<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Actions</key>
		<array>
			<dict>
				<key>ActionUID</key>
				<integer>16620027</integer>
				<key>DisplayKind</key>
				<string>Variable</string>
				<key>HonourFailureSettings</key>
				<true/>
				<key>IncludeStdErr</key>
				<false/>
				<key>IncludedVariables</key>
				<array>
					<string>Palette name</string>
					<string>New X position</string>
					<string>New Y position</string>
				</array>
				<key>MacroActionType</key>
				<string>ExecuteJavaScriptForAutomation</string>
				<key>Path</key>
				<string></string>
				<key>Text</key>
				<string>// return (() =&gt; {
    "use strict";

    const main = () =&gt; {
        const
            paletteName = kmvar.Palette_name.trim(),
            X = kmvar.New_X_position || "",
            Y = kmvar.New_Y_position || "";

        return either(
            alert(`Move palette named "${paletteName}"`)
        )(
            msg =&gt; msg
        )(
            0 &lt; paletteName.length
                ? [X, Y].some(
                    s =&gt; 0 &lt; s.trim().length &amp;&amp; isNaN(s)
                )
                    ? Left(
                        [
                            "X and Y must both be numeric or blank.",
                            `( Saw X:${X} Y:${Y} )`
                        ].join("\n\n\t")
                    )
                    : namedPaletteToXYLR(paletteName)(
                        [X, Y].map(Number)
                    )
                : Left("Palette name not specified.")
        );
    };

    // namedPaletteToXYLR :: String -&gt;
    // (Int, Int) -&gt; Either String IO String
    const namedPaletteToXYLR = paletteName =&gt;
        (xy) =&gt; {
            const
                se = Application("System Events"),
                procs = se.applicationProcesses.where({
                    name: "Keyboard Maestro Engine"
                });

            return bindLR(
                0 &lt; procs.length
                    ? Right(procs[0])
                    : Left("Keyboard Maestro Engine not running")
            )(
                namedWindowMovedLR(se)(paletteName)(xy)
            );
        };

    // namedWindowMovedLR :: System Events -&gt; String -&gt;
    // (Num, Num) -&gt; KM Engine Process -&gt; IO Either String String
    const namedWindowMovedLR = se =&gt;
        paletteName =&gt; ([x, y]) =&gt;
            procKME =&gt; {
                const
                    windowName = (
                        "global" === paletteName.toLocaleLowerCase()
                            ? "Keyboard Maestro"
                            : paletteName
                    ),
                    paletteWin = procKME.windows
                    .byName(windowName);

                return paletteWin.exists()
                    ? Right(
                        (() =&gt; {
                            const
                                xy = paletteWin.position(),
                                newXY = [x || xy[0], y || xy[1]];

                            return (
                                paletteWin.position = newXY,
                                se.perform(paletteWin.actions.AXRaise),
                                `Palette "${paletteName}" moved to ${newXY}.`
                            );
                        })()
                    )
                    : Left(
                        [
                            "Palette not found as spelled:",
                            `\t"${paletteName}"`
                        ].join("\n")
                    );
            };


    // ----------------------- JXA -----------------------

    // alert :: String =&gt; String -&gt; IO String
    const alert = title =&gt;
        s =&gt; {
            const sa = Object.assign(
                Application("System Events"), {
                    includeStandardAdditions: true
                });

            return (
                sa.activate(),
                sa.displayDialog(s, {
                    withTitle: title,
                    buttons: ["OK"],
                    defaultButton: "OK"
                }),
                s
            );
        };

    // --------------------- GENERIC ---------------------

    // Left :: a -&gt; Either a b
    const Left = x =&gt; ({
        type: "Either",
        Left: x
    });

    // Right :: b -&gt; Either a b
    const Right = x =&gt; ({
        type: "Either",
        Right: x
    });

    // bindLR (&gt;&gt;=) :: Either a -&gt;
    // (a -&gt; Either b) -&gt; Either b
    const bindLR = m =&gt;
        mf =&gt; m.Left ? (
            m
        ) : mf(m.Right);

    // either :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c
    const either = fl =&gt;
        // Application of the function fl to the
        // contents of any Left value in e, or
        // the application of fr to its Right value.
        fr =&gt; e =&gt; e.Left ? (
            fl(e.Left)
        ) : fr(e.Right);

    return main();
// })();
</string>
				<key>TimeOutAbortsMacro</key>
				<true/>
				<key>TrimResults</key>
				<true/>
				<key>TrimResultsNew</key>
				<true/>
				<key>UseModernSyntax</key>
				<true/>
				<key>UseText</key>
				<true/>
				<key>Variable</key>
				<string>local_Result</string>
			</dict>
			<dict>
				<key>ActionUID</key>
				<integer>16620028</integer>
				<key>MacroActionType</key>
				<string>Return</string>
				<key>Text</key>
				<string>%Variable%local_Result%</string>
			</dict>
		</array>
		<key>CreationDate</key>
		<real>726702016.08645999</real>
		<key>CustomIconData</key>
		<string>KMEC=Rounded=KMCOLOR:239,239,239,255=â†“=86=0=2=0=KMCOLOR:255,0,0,255</string>
		<key>ModificationDate</key>
		<real>726746297.39665306</real>
		<key>Name</key>
		<string>Move a Named Keyboard Maestro Palette</string>
		<key>Triggers</key>
		<array>
			<dict>
				<key>MacroTriggerType</key>
				<string>Subroutine</string>
				<key>Parameters</key>
				<array>
					<string>Palette name</string>
					<string>New X position</string>
					<string>New Y position</string>
				</array>
				<key>ReturnsValue</key>
				<true/>
			</dict>
		</array>
		<key>UID</key>
		<string>02931FFC-E9C8-448E-B266-414400D2179E</string>
	</dict>
</array>
</plist>
